!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var n=F[U]={i:U,l:!1,exports:{}};return Q[U].call(n.exports,n,n.exports,B),n.l=!0,n.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var n in Q)B.d(U,n,function(F){return Q[F]}.bind(null,n));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=2)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNoInOutExecutionContext", function() { return createNoInOutExecutionContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useVar", function() { return useVar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useRequestUpdate", function() { return useRequestUpdate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useInitialize", function() { return useInitialize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useAsyncEventEmitter", function() { return useAsyncEventEmitter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useEventReceiver", function() { return useEventReceiver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useDynamic", function() { return useDynamic; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useReducer", function() { return useReducer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useMachine", function() { return useMachine; });\nlet currentUpdateFrame = null;\n\nclass ExecutionContext {\n  constructor(streamFunc, onRequestUpdate, afterTerminate) {\n    this.streamFunc = streamFunc;\n    this.onRequestUpdate = onRequestUpdate;\n    this.afterTerminate = afterTerminate;\n    this.hookRecordChain = {\n      next: null\n    }; // dummy\n\n    this.recordCursor = null; // only set when this context is updating\n\n    this.updateCount = 0;\n  }\n\n  update() {\n    // Push a new update frame onto the update stack for this context\n    const newFrame = {\n      executionContext: this,\n      previousFrame: currentUpdateFrame\n    };\n    currentUpdateFrame = newFrame; // Move hook record cursor to start of chain\n\n    this.recordCursor = this.hookRecordChain;\n    const retval = this.streamFunc.apply(null, arguments); // This should be null, otherwise there are hook records we didn\'t get to, and something is amiss\n\n    if (this.recordCursor.next) {\n      throw new Error(\'Did not reach all hook records in update\');\n    } // Pop the top frame from the update stack\n\n\n    const poppedFrame = currentUpdateFrame;\n\n    if (!poppedFrame) {\n      throw new Error(\'Cannot pop update frame because current is null\');\n    }\n\n    if (poppedFrame.executionContext !== this) {\n      throw new Error("Popped frame from update stack but context did not match");\n    }\n\n    currentUpdateFrame = poppedFrame.previousFrame;\n    this.updateCount++;\n    return retval;\n  }\n\n  terminate() {\n    // NOTE: Might we want to sanity check that this context isn\'t anywhere in the current update stack?\n    // Call any cleanup functions set by hooks\n    // TODO: Do we need to worry about order?\n    for (let c = this.hookRecordChain.next; c; c = c.next) {\n      if (c.cleanup) {\n        c.cleanup();\n      }\n    }\n\n    if (this.afterTerminate) {\n      this.afterTerminate();\n    }\n  }\n\n  _beginHook() {\n    if (this.updateCount === 0) {\n      if (this.recordCursor.next) {\n        throw new Error(\'Expecting to create new hook record in chain, but already present\');\n      } // Create new record\n\n\n      this.recordCursor.next = {\n        data: undefined,\n        cleanup: undefined,\n        next: null\n      };\n    }\n\n    if (!this.recordCursor.next) {\n      throw new Error(\'Expecting to find hook record in chain, but not present\');\n    }\n\n    return this.recordCursor.next;\n  }\n\n  _endHook() {\n    this.recordCursor = this.recordCursor.next; // move cursor forward\n  }\n\n  _requestUpdate() {\n    this.onRequestUpdate();\n  }\n  /**\n   * This is only safe to do if the replacement function calls the same hooks, has same signature, etc.\n   * It\'s currently used to provide a function that is lexically the same but bound to different outer-scope\n   * variables.\n   */\n\n\n  _setStreamFunc(newStreamFunc) {\n    this.streamFunc = newStreamFunc;\n  }\n\n}\n\nfunction createNoInOutExecutionContext(streamFunc) {\n  const onRequestUpdate = () => {\n    ctx.update();\n  };\n\n  const ctx = new ExecutionContext(streamFunc, onRequestUpdate);\n  return ctx;\n}\n/**\n * This is used by hooks to get the currently updating context (after verifying it is set)\n */\n\nfunction getTopUpdatingExecutionContext() {\n  if (!currentUpdateFrame) {\n    throw new Error(\'Cannot get currently updating execution context because update stack is empty. Was a hook called outside of an execution context update?\');\n  }\n\n  return currentUpdateFrame.executionContext;\n}\n\nfunction useVar(initVal) {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook(); // Create value box if necessary\n\n\n  if (!record.data) {\n    record.data = {\n      current: initVal\n    };\n  }\n\n  ctx._endHook();\n\n  return record.data;\n}\n/**\n * Why do we need a hook? Why can\'t we just call ctx.requestUpdate()? Because the requestUpdate\n * function that we return will often be called without there being any updating execution context\n * (e.g. from an event handler). So it has to be bound to the correct context.\n */\n\nfunction useRequestUpdate() {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook(); // Create callback if necessary. We store it so that we already return the same one.\n\n\n  if (!record.data) {\n    record.data = {\n      requestUpdate: () => {\n        ctx._requestUpdate(); // it\'s important that we use ctx from closure, not getTopUpdatingExecutionContext() here\n\n      }\n    };\n  }\n\n  ctx._endHook();\n\n  return record.data.requestUpdate;\n}\nfunction useInitialize(initializer) {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook(); // Initialize if necessary\n\n\n  if (!record.data) {\n    // data being undefined means this is the first call\n    record.cleanup = initializer();\n    record.data = {}; // no data to store yet, just needs to be truthy to indicate that initialization ran\n  }\n\n  ctx._endHook();\n}\n/**\n * This is effectively a queue with only a single-item capacity, to support async event emission\n */\n\nfunction useAsyncEventEmitter() {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook(); // Initialize record data if necessary\n\n\n  if (!record.data) {\n    const data = {\n      queuedEvent: undefined\n    };\n\n    data.emit = value => {\n      if (data.queuedEvent) {\n        throw new Error(\'Cannot emit another event since one is already enqueued\');\n      }\n\n      data.queuedEvent = {\n        value\n      };\n    };\n\n    record.data = data;\n  }\n\n  let retval;\n\n  if (record.data.queuedEvent) {\n    // Pop queued event\n    retval = record.data.queuedEvent;\n    record.data.queuedEvent = undefined;\n  }\n\n  ctx._endHook();\n\n  return [retval, record.data.emit];\n}\nfunction useEventReceiver(evt) {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook(); // Initialize record data if necessary\n\n\n  if (!record.data) {\n    record.data = {\n      seen: new WeakSet() // event objects we have already seen\n\n    };\n  }\n\n  let retval;\n\n  if (evt) {\n    if (!record.data.seen.has(evt)) {\n      retval = evt;\n      record.data.seen.add(evt);\n    }\n  }\n\n  ctx._endHook();\n\n  return retval;\n}\n/**\n * The streamFunc argument may change, but it should only change to a function that can be safely\n * swapped in (i.e. one that calls the same hooks, etc.). A common case is that streamFunc is a\n * closure that references some outer scope variables, and when those change, a new "version" of\n * the function is created (lexically the same, but closing over a different scope).\n *\n * onRequestUpdate is currently only read on the first call, so changes to it will have no effect.\n */\n\nfunction useDynamic(streamFunc, onRequestUpdate) {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook(); // Initialize record data if necessary\n\n\n  if (!record.data) {\n    const data = {}; // If no onRequestUpdate is provided, default to requesting update on the current context\n\n    const oru = onRequestUpdate || (() => {\n      ctx._requestUpdate();\n    }); // Track ExecutionContexts created (and not yet terminated) so we can terminate them upon cleanup\n\n\n    data.activeContexts = new Set(); // Create "factory" function to instantiate new contexts\n\n    data.createContext = () => {\n      const ctx = new ExecutionContext(data.streamFunc, oru, () => {\n        data.activeContexts.delete(ctx);\n      });\n      data.activeContexts.add(ctx);\n      return ctx;\n    };\n\n    record.data = data;\n\n    record.cleanup = () => {\n      for (const ctx of data.activeContexts) {\n        ctx.terminate();\n      }\n    };\n  } // Update the stream function in record and all active contexts.\n\n\n  record.data.streamFunc = streamFunc;\n\n  for (const ctx of record.data.activeContexts) {\n    ctx._setStreamFunc(streamFunc);\n  }\n\n  ctx._endHook();\n\n  return record.data.createContext;\n}\nfunction useReducer(actionEvts, reducerFunc, initialState) {\n  const state = useVar(initialState);\n  const action = useEventReceiver(actionEvts);\n  state.current = reducerFunc(action, state.current);\n  return state.current;\n}\n/**\n * TODO: Could/should this take an optional onRequestUpdate parameter?\n */\n\nfunction useMachine(states, initialTransition) {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook();\n\n  const takeTransition = trans => {\n    // If there\'s an old context, terminate it\n    if (record.data.activeContext) {\n      record.data.activeContext.terminate();\n    }\n\n    const [newState, newStateArg] = trans; // Create a new context and store it in record (but don\'t update it)\n\n    const newCtx = new ExecutionContext(states[newState], () => {\n      ctx._requestUpdate();\n    });\n    record.data.activeState = newState;\n    record.data.activeContext = newCtx;\n    record.data.activeArgument = newStateArg;\n  };\n\n  if (!record.data) {\n    const data = {};\n    record.data = data;\n    takeTransition(initialTransition); // this will set stuff in record.data\n\n    record.cleanup = () => {\n      data.activeContext.terminate();\n    };\n  }\n\n  let retval;\n\n  while (true) {\n    // Set the state function in the active context (in case it changed)\n    record.data.activeContext._setStreamFunc(states[record.data.activeState]); // Update the active context\n\n\n    const [tmpRetval, transitionEvt] = record.data.activeContext.update(record.data.activeArgument);\n    retval = tmpRetval; // Was there a transition event?\n    // NOTE: Because we transition upon first even on this stream, we can sort of special-case this check\n\n    if (transitionEvt) {\n      const transition = transitionEvt.value;\n      takeTransition(transition);\n    } else {\n      // There was no transition\n      break;\n    }\n  }\n\n  ctx._endHook();\n\n  return retval;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcml2LmpzPzgxNWEiXSwibmFtZXMiOlsiY3VycmVudFVwZGF0ZUZyYW1lIiwiRXhlY3V0aW9uQ29udGV4dCIsImNvbnN0cnVjdG9yIiwic3RyZWFtRnVuYyIsIm9uUmVxdWVzdFVwZGF0ZSIsImFmdGVyVGVybWluYXRlIiwiaG9va1JlY29yZENoYWluIiwibmV4dCIsInJlY29yZEN1cnNvciIsInVwZGF0ZUNvdW50IiwidXBkYXRlIiwibmV3RnJhbWUiLCJleGVjdXRpb25Db250ZXh0IiwicHJldmlvdXNGcmFtZSIsInJldHZhbCIsImFwcGx5IiwiYXJndW1lbnRzIiwiRXJyb3IiLCJwb3BwZWRGcmFtZSIsInRlcm1pbmF0ZSIsImMiLCJjbGVhbnVwIiwiX2JlZ2luSG9vayIsImRhdGEiLCJ1bmRlZmluZWQiLCJfZW5kSG9vayIsIl9yZXF1ZXN0VXBkYXRlIiwiX3NldFN0cmVhbUZ1bmMiLCJuZXdTdHJlYW1GdW5jIiwiY3JlYXRlTm9Jbk91dEV4ZWN1dGlvbkNvbnRleHQiLCJjdHgiLCJnZXRUb3BVcGRhdGluZ0V4ZWN1dGlvbkNvbnRleHQiLCJ1c2VWYXIiLCJpbml0VmFsIiwicmVjb3JkIiwiY3VycmVudCIsInVzZVJlcXVlc3RVcGRhdGUiLCJyZXF1ZXN0VXBkYXRlIiwidXNlSW5pdGlhbGl6ZSIsImluaXRpYWxpemVyIiwidXNlQXN5bmNFdmVudEVtaXR0ZXIiLCJxdWV1ZWRFdmVudCIsImVtaXQiLCJ2YWx1ZSIsInVzZUV2ZW50UmVjZWl2ZXIiLCJldnQiLCJzZWVuIiwiV2Vha1NldCIsImhhcyIsImFkZCIsInVzZUR5bmFtaWMiLCJvcnUiLCJhY3RpdmVDb250ZXh0cyIsIlNldCIsImNyZWF0ZUNvbnRleHQiLCJkZWxldGUiLCJ1c2VSZWR1Y2VyIiwiYWN0aW9uRXZ0cyIsInJlZHVjZXJGdW5jIiwiaW5pdGlhbFN0YXRlIiwic3RhdGUiLCJhY3Rpb24iLCJ1c2VNYWNoaW5lIiwic3RhdGVzIiwiaW5pdGlhbFRyYW5zaXRpb24iLCJ0YWtlVHJhbnNpdGlvbiIsInRyYW5zIiwiYWN0aXZlQ29udGV4dCIsIm5ld1N0YXRlIiwibmV3U3RhdGVBcmciLCJuZXdDdHgiLCJhY3RpdmVTdGF0ZSIsImFjdGl2ZUFyZ3VtZW50IiwidG1wUmV0dmFsIiwidHJhbnNpdGlvbkV2dCIsInRyYW5zaXRpb24iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBSUEsa0JBQWtCLEdBQUcsSUFBekI7O0FBRUEsTUFBTUMsZ0JBQU4sQ0FBdUI7QUFDckJDLGFBQVcsQ0FBQ0MsVUFBRCxFQUFhQyxlQUFiLEVBQThCQyxjQUE5QixFQUE4QztBQUN2RCxTQUFLRixVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLFNBQUtDLGVBQUwsR0FBdUJBLGVBQXZCO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQkEsY0FBdEI7QUFFQSxTQUFLQyxlQUFMLEdBQXVCO0FBQUNDLFVBQUksRUFBRTtBQUFQLEtBQXZCLENBTHVELENBS2xCOztBQUNyQyxTQUFLQyxZQUFMLEdBQW9CLElBQXBCLENBTnVELENBTTdCOztBQUMxQixTQUFLQyxXQUFMLEdBQW1CLENBQW5CO0FBQ0Q7O0FBRURDLFFBQU0sR0FBRztBQUNQO0FBQ0EsVUFBTUMsUUFBUSxHQUFHO0FBQ2ZDLHNCQUFnQixFQUFFLElBREg7QUFFZkMsbUJBQWEsRUFBRWI7QUFGQSxLQUFqQjtBQUlBQSxzQkFBa0IsR0FBR1csUUFBckIsQ0FOTyxDQVFQOztBQUNBLFNBQUtILFlBQUwsR0FBb0IsS0FBS0YsZUFBekI7QUFFQSxVQUFNUSxNQUFNLEdBQUcsS0FBS1gsVUFBTCxDQUFnQlksS0FBaEIsQ0FBc0IsSUFBdEIsRUFBNEJDLFNBQTVCLENBQWYsQ0FYTyxDQWFQOztBQUNBLFFBQUksS0FBS1IsWUFBTCxDQUFrQkQsSUFBdEIsRUFBNEI7QUFDMUIsWUFBTSxJQUFJVSxLQUFKLENBQVUsMENBQVYsQ0FBTjtBQUNELEtBaEJNLENBa0JQOzs7QUFD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dGVGcmFtZSA9IG51bGw7XG5cbmNsYXNzIEV4ZWN1dGlvbkNvbnRleHQge1xuICBjb25zdHJ1Y3RvcihzdHJlYW1GdW5jLCBvblJlcXVlc3RVcGRhdGUsIGFmdGVyVGVybWluYXRlKSB7XG4gICAgdGhpcy5zdHJlYW1GdW5jID0gc3RyZWFtRnVuYztcbiAgICB0aGlzLm9uUmVxdWVzdFVwZGF0ZSA9IG9uUmVxdWVzdFVwZGF0ZTtcbiAgICB0aGlzLmFmdGVyVGVybWluYXRlID0gYWZ0ZXJUZXJtaW5hdGU7XG5cbiAgICB0aGlzLmhvb2tSZWNvcmRDaGFpbiA9IHtuZXh0OiBudWxsfTsgLy8gZHVtbXlcbiAgICB0aGlzLnJlY29yZEN1cnNvciA9IG51bGw7IC8vIG9ubHkgc2V0IHdoZW4gdGhpcyBjb250ZXh0IGlzIHVwZGF0aW5nXG4gICAgdGhpcy51cGRhdGVDb3VudCA9IDA7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgLy8gUHVzaCBhIG5ldyB1cGRhdGUgZnJhbWUgb250byB0aGUgdXBkYXRlIHN0YWNrIGZvciB0aGlzIGNvbnRleHRcbiAgICBjb25zdCBuZXdGcmFtZSA9IHtcbiAgICAgIGV4ZWN1dGlvbkNvbnRleHQ6IHRoaXMsXG4gICAgICBwcmV2aW91c0ZyYW1lOiBjdXJyZW50VXBkYXRlRnJhbWUsXG4gICAgfTtcbiAgICBjdXJyZW50VXBkYXRlRnJhbWUgPSBuZXdGcmFtZTtcblxuICAgIC8vIE1vdmUgaG9vayByZWNvcmQgY3Vyc29yIHRvIHN0YXJ0IG9mIGNoYWluXG4gICAgdGhpcy5yZWNvcmRDdXJzb3IgPSB0aGlzLmhvb2tSZWNvcmRDaGFpbjtcblxuICAgIGNvbnN0IHJldHZhbCA9IHRoaXMuc3RyZWFtRnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuXG4gICAgLy8gVGhpcyBzaG91bGQgYmUgbnVsbCwgb3RoZXJ3aXNlIHRoZXJlIGFyZSBob29rIHJlY29yZHMgd2UgZGlkbid0IGdldCB0bywgYW5kIHNvbWV0aGluZyBpcyBhbWlzc1xuICAgIGlmICh0aGlzLnJlY29yZEN1cnNvci5uZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RpZCBub3QgcmVhY2ggYWxsIGhvb2sgcmVjb3JkcyBpbiB1cGRhdGUnKTtcbiAgICB9XG5cbiAgICAvLyBQb3AgdGhlIHRvcCBmcmFtZSBmcm9tIHRoZSB1cGRhdGUgc3RhY2tcbiAgICBjb25zdCBwb3BwZWRGcmFtZSA9IGN1cnJlbnRVcGRhdGVGcmFtZTtcbiAgICBpZiAoIXBvcHBlZEZyYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBwb3AgdXBkYXRlIGZyYW1lIGJlY2F1c2UgY3VycmVudCBpcyBudWxsJyk7XG4gICAgfVxuICAgIGlmIChwb3BwZWRGcmFtZS5leGVjdXRpb25Db250ZXh0ICE9PSB0aGlzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQb3BwZWQgZnJhbWUgZnJvbSB1cGRhdGUgc3RhY2sgYnV0IGNvbnRleHQgZGlkIG5vdCBtYXRjaFwiKTtcbiAgICB9XG4gICAgY3VycmVudFVwZGF0ZUZyYW1lID0gcG9wcGVkRnJhbWUucHJldmlvdXNGcmFtZTtcblxuICAgIHRoaXMudXBkYXRlQ291bnQrKztcblxuICAgIHJldHVybiByZXR2YWw7XG4gIH1cblxuICB0ZXJtaW5hdGUoKSB7XG4gICAgLy8gTk9URTogTWlnaHQgd2Ugd2FudCB0byBzYW5pdHkgY2hlY2sgdGhhdCB0aGlzIGNvbnRleHQgaXNuJ3QgYW55d2hlcmUgaW4gdGhlIGN1cnJlbnQgdXBkYXRlIHN0YWNrP1xuXG4gICAgLy8gQ2FsbCBhbnkgY2xlYW51cCBmdW5jdGlvbnMgc2V0IGJ5IGhvb2tzXG4gICAgLy8gVE9ETzogRG8gd2UgbmVlZCB0byB3b3JyeSBhYm91dCBvcmRlcj9cbiAgICBmb3IgKGxldCBjID0gdGhpcy5ob29rUmVjb3JkQ2hhaW4ubmV4dDsgYzsgYyA9IGMubmV4dCkge1xuICAgICAgaWYgKGMuY2xlYW51cCkge1xuICAgICAgICBjLmNsZWFudXAoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5hZnRlclRlcm1pbmF0ZSkge1xuICAgICAgdGhpcy5hZnRlclRlcm1pbmF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIF9iZWdpbkhvb2soKSB7XG4gICAgaWYgKHRoaXMudXBkYXRlQ291bnQgPT09IDApIHtcbiAgICAgIGlmICh0aGlzLnJlY29yZEN1cnNvci5uZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0aW5nIHRvIGNyZWF0ZSBuZXcgaG9vayByZWNvcmQgaW4gY2hhaW4sIGJ1dCBhbHJlYWR5IHByZXNlbnQnKTtcbiAgICAgIH1cbiAgICAgIC8vIENyZWF0ZSBuZXcgcmVjb3JkXG4gICAgICB0aGlzLnJlY29yZEN1cnNvci5uZXh0ID0ge1xuICAgICAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgICAgIGNsZWFudXA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucmVjb3JkQ3Vyc29yLm5leHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0aW5nIHRvIGZpbmQgaG9vayByZWNvcmQgaW4gY2hhaW4sIGJ1dCBub3QgcHJlc2VudCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlY29yZEN1cnNvci5uZXh0O1xuICB9XG5cbiAgX2VuZEhvb2soKSB7XG4gICAgdGhpcy5yZWNvcmRDdXJzb3IgPSB0aGlzLnJlY29yZEN1cnNvci5uZXh0OyAvLyBtb3ZlIGN1cnNvciBmb3J3YXJkXG4gIH1cblxuICBfcmVxdWVzdFVwZGF0ZSgpIHtcbiAgICB0aGlzLm9uUmVxdWVzdFVwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgb25seSBzYWZlIHRvIGRvIGlmIHRoZSByZXBsYWNlbWVudCBmdW5jdGlvbiBjYWxscyB0aGUgc2FtZSBob29rcywgaGFzIHNhbWUgc2lnbmF0dXJlLCBldGMuXG4gICAqIEl0J3MgY3VycmVudGx5IHVzZWQgdG8gcHJvdmlkZSBhIGZ1bmN0aW9uIHRoYXQgaXMgbGV4aWNhbGx5IHRoZSBzYW1lIGJ1dCBib3VuZCB0byBkaWZmZXJlbnQgb3V0ZXItc2NvcGVcbiAgICogdmFyaWFibGVzLlxuICAgKi9cbiAgX3NldFN0cmVhbUZ1bmMobmV3U3RyZWFtRnVuYykge1xuICAgIHRoaXMuc3RyZWFtRnVuYyA9IG5ld1N0cmVhbUZ1bmM7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vSW5PdXRFeGVjdXRpb25Db250ZXh0KHN0cmVhbUZ1bmMpIHtcbiAgY29uc3Qgb25SZXF1ZXN0VXBkYXRlID0gKCkgPT4geyBjdHgudXBkYXRlKCkgfTtcbiAgY29uc3QgY3R4ID0gbmV3IEV4ZWN1dGlvbkNvbnRleHQoc3RyZWFtRnVuYywgb25SZXF1ZXN0VXBkYXRlKVxuICByZXR1cm4gY3R4O1xufVxuXG4vKipcbiAqIFRoaXMgaXMgdXNlZCBieSBob29rcyB0byBnZXQgdGhlIGN1cnJlbnRseSB1cGRhdGluZyBjb250ZXh0IChhZnRlciB2ZXJpZnlpbmcgaXQgaXMgc2V0KVxuICovXG5mdW5jdGlvbiBnZXRUb3BVcGRhdGluZ0V4ZWN1dGlvbkNvbnRleHQoKSB7XG4gIGlmICghY3VycmVudFVwZGF0ZUZyYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZ2V0IGN1cnJlbnRseSB1cGRhdGluZyBleGVjdXRpb24gY29udGV4dCBiZWNhdXNlIHVwZGF0ZSBzdGFjayBpcyBlbXB0eS4gV2FzIGEgaG9vayBjYWxsZWQgb3V0c2lkZSBvZiBhbiBleGVjdXRpb24gY29udGV4dCB1cGRhdGU/Jyk7XG4gIH1cbiAgcmV0dXJuIGN1cnJlbnRVcGRhdGVGcmFtZS5leGVjdXRpb25Db250ZXh0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlVmFyKGluaXRWYWwpIHtcbiAgY29uc3QgY3R4ID0gZ2V0VG9wVXBkYXRpbmdFeGVjdXRpb25Db250ZXh0KCk7XG4gIGNvbnN0IHJlY29yZCA9IGN0eC5fYmVnaW5Ib29rKCk7XG5cbiAgLy8gQ3JlYXRlIHZhbHVlIGJveCBpZiBuZWNlc3NhcnlcbiAgaWYgKCFyZWNvcmQuZGF0YSkge1xuICAgIHJlY29yZC5kYXRhID0ge2N1cnJlbnQ6IGluaXRWYWx9O1xuICB9XG5cbiAgY3R4Ll9lbmRIb29rKCk7XG5cbiAgcmV0dXJuIHJlY29yZC5kYXRhO1xufVxuXG4vKipcbiAqIFdoeSBkbyB3ZSBuZWVkIGEgaG9vaz8gV2h5IGNhbid0IHdlIGp1c3QgY2FsbCBjdHgucmVxdWVzdFVwZGF0ZSgpPyBCZWNhdXNlIHRoZSByZXF1ZXN0VXBkYXRlXG4gKiBmdW5jdGlvbiB0aGF0IHdlIHJldHVybiB3aWxsIG9mdGVuIGJlIGNhbGxlZCB3aXRob3V0IHRoZXJlIGJlaW5nIGFueSB1cGRhdGluZyBleGVjdXRpb24gY29udGV4dFxuICogKGUuZy4gZnJvbSBhbiBldmVudCBoYW5kbGVyKS4gU28gaXQgaGFzIHRvIGJlIGJvdW5kIHRvIHRoZSBjb3JyZWN0IGNvbnRleHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZXF1ZXN0VXBkYXRlKCkge1xuICBjb25zdCBjdHggPSBnZXRUb3BVcGRhdGluZ0V4ZWN1dGlvbkNvbnRleHQoKTtcbiAgY29uc3QgcmVjb3JkID0gY3R4Ll9iZWdpbkhvb2soKTtcblxuICAvLyBDcmVhdGUgY2FsbGJhY2sgaWYgbmVjZXNzYXJ5LiBXZSBzdG9yZSBpdCBzbyB0aGF0IHdlIGFscmVhZHkgcmV0dXJuIHRoZSBzYW1lIG9uZS5cbiAgaWYgKCFyZWNvcmQuZGF0YSkge1xuICAgIHJlY29yZC5kYXRhID0ge3JlcXVlc3RVcGRhdGU6ICgpID0+IHtcbiAgICAgIGN0eC5fcmVxdWVzdFVwZGF0ZSgpOyAvLyBpdCdzIGltcG9ydGFudCB0aGF0IHdlIHVzZSBjdHggZnJvbSBjbG9zdXJlLCBub3QgZ2V0VG9wVXBkYXRpbmdFeGVjdXRpb25Db250ZXh0KCkgaGVyZVxuICAgIH19O1xuICB9XG5cbiAgY3R4Ll9lbmRIb29rKCk7XG5cbiAgcmV0dXJuIHJlY29yZC5kYXRhLnJlcXVlc3RVcGRhdGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VJbml0aWFsaXplKGluaXRpYWxpemVyKSB7XG4gIGNvbnN0IGN0eCA9IGdldFRvcFVwZGF0aW5nRXhlY3V0aW9uQ29udGV4dCgpO1xuICBjb25zdCByZWNvcmQgPSBjdHguX2JlZ2luSG9vaygpO1xuXG4gIC8vIEluaXRpYWxpemUgaWYgbmVjZXNzYXJ5XG4gIGlmICghcmVjb3JkLmRhdGEpIHtcbiAgICAvLyBkYXRhIGJlaW5nIHVuZGVmaW5lZCBtZWFucyB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsXG5cbiAgICByZWNvcmQuY2xlYW51cCA9IGluaXRpYWxpemVyKCk7XG5cbiAgICByZWNvcmQuZGF0YSA9IHt9OyAvLyBubyBkYXRhIHRvIHN0b3JlIHlldCwganVzdCBuZWVkcyB0byBiZSB0cnV0aHkgdG8gaW5kaWNhdGUgdGhhdCBpbml0aWFsaXphdGlvbiByYW5cbiAgfVxuXG4gIGN0eC5fZW5kSG9vaygpO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgZWZmZWN0aXZlbHkgYSBxdWV1ZSB3aXRoIG9ubHkgYSBzaW5nbGUtaXRlbSBjYXBhY2l0eSwgdG8gc3VwcG9ydCBhc3luYyBldmVudCBlbWlzc2lvblxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQXN5bmNFdmVudEVtaXR0ZXIoKSB7XG4gIGNvbnN0IGN0eCA9IGdldFRvcFVwZGF0aW5nRXhlY3V0aW9uQ29udGV4dCgpO1xuICBjb25zdCByZWNvcmQgPSBjdHguX2JlZ2luSG9vaygpO1xuXG4gIC8vIEluaXRpYWxpemUgcmVjb3JkIGRhdGEgaWYgbmVjZXNzYXJ5XG4gIGlmICghcmVjb3JkLmRhdGEpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgcXVldWVkRXZlbnQ6IHVuZGVmaW5lZCxcbiAgICB9O1xuXG4gICAgZGF0YS5lbWl0ID0gKHZhbHVlKSA9PiB7XG4gICAgICBpZiAoZGF0YS5xdWV1ZWRFdmVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBlbWl0IGFub3RoZXIgZXZlbnQgc2luY2Ugb25lIGlzIGFscmVhZHkgZW5xdWV1ZWQnKTtcbiAgICAgIH1cbiAgICAgIGRhdGEucXVldWVkRXZlbnQgPSB7dmFsdWV9O1xuICAgIH07XG5cbiAgICByZWNvcmQuZGF0YSA9IGRhdGE7XG4gIH1cblxuICBsZXQgcmV0dmFsO1xuICBpZiAocmVjb3JkLmRhdGEucXVldWVkRXZlbnQpIHtcbiAgICAvLyBQb3AgcXVldWVkIGV2ZW50XG4gICAgcmV0dmFsID0gcmVjb3JkLmRhdGEucXVldWVkRXZlbnQ7XG4gICAgcmVjb3JkLmRhdGEucXVldWVkRXZlbnQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBjdHguX2VuZEhvb2soKTtcblxuICByZXR1cm4gW3JldHZhbCwgcmVjb3JkLmRhdGEuZW1pdF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VFdmVudFJlY2VpdmVyKGV2dCkge1xuICBjb25zdCBjdHggPSBnZXRUb3BVcGRhdGluZ0V4ZWN1dGlvbkNvbnRleHQoKTtcbiAgY29uc3QgcmVjb3JkID0gY3R4Ll9iZWdpbkhvb2soKTtcblxuICAvLyBJbml0aWFsaXplIHJlY29yZCBkYXRhIGlmIG5lY2Vzc2FyeVxuICBpZiAoIXJlY29yZC5kYXRhKSB7XG4gICAgcmVjb3JkLmRhdGEgPSB7XG4gICAgICBzZWVuOiBuZXcgV2Vha1NldCgpLCAvLyBldmVudCBvYmplY3RzIHdlIGhhdmUgYWxyZWFkeSBzZWVuXG4gICAgfTtcbiAgfVxuXG4gIGxldCByZXR2YWw7XG4gIGlmIChldnQpIHtcbiAgICBpZiAoIXJlY29yZC5kYXRhLnNlZW4uaGFzKGV2dCkpIHtcbiAgICAgIHJldHZhbCA9IGV2dDtcbiAgICAgIHJlY29yZC5kYXRhLnNlZW4uYWRkKGV2dCk7XG4gICAgfVxuICB9XG5cbiAgY3R4Ll9lbmRIb29rKCk7XG5cbiAgcmV0dXJuIHJldHZhbDtcbn1cblxuLyoqXG4gKiBUaGUgc3RyZWFtRnVuYyBhcmd1bWVudCBtYXkgY2hhbmdlLCBidXQgaXQgc2hvdWxkIG9ubHkgY2hhbmdlIHRvIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgc2FmZWx5XG4gKiBzd2FwcGVkIGluIChpLmUuIG9uZSB0aGF0IGNhbGxzIHRoZSBzYW1lIGhvb2tzLCBldGMuKS4gQSBjb21tb24gY2FzZSBpcyB0aGF0IHN0cmVhbUZ1bmMgaXMgYVxuICogY2xvc3VyZSB0aGF0IHJlZmVyZW5jZXMgc29tZSBvdXRlciBzY29wZSB2YXJpYWJsZXMsIGFuZCB3aGVuIHRob3NlIGNoYW5nZSwgYSBuZXcgXCJ2ZXJzaW9uXCIgb2ZcbiAqIHRoZSBmdW5jdGlvbiBpcyBjcmVhdGVkIChsZXhpY2FsbHkgdGhlIHNhbWUsIGJ1dCBjbG9zaW5nIG92ZXIgYSBkaWZmZXJlbnQgc2NvcGUpLlxuICpcbiAqIG9uUmVxdWVzdFVwZGF0ZSBpcyBjdXJyZW50bHkgb25seSByZWFkIG9uIHRoZSBmaXJzdCBjYWxsLCBzbyBjaGFuZ2VzIHRvIGl0IHdpbGwgaGF2ZSBubyBlZmZlY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VEeW5hbWljKHN0cmVhbUZ1bmMsIG9uUmVxdWVzdFVwZGF0ZSkge1xuICBjb25zdCBjdHggPSBnZXRUb3BVcGRhdGluZ0V4ZWN1dGlvbkNvbnRleHQoKTtcbiAgY29uc3QgcmVjb3JkID0gY3R4Ll9iZWdpbkhvb2soKTtcblxuICAvLyBJbml0aWFsaXplIHJlY29yZCBkYXRhIGlmIG5lY2Vzc2FyeVxuICBpZiAoIXJlY29yZC5kYXRhKSB7XG4gICAgY29uc3QgZGF0YSA9IHt9O1xuXG4gICAgLy8gSWYgbm8gb25SZXF1ZXN0VXBkYXRlIGlzIHByb3ZpZGVkLCBkZWZhdWx0IHRvIHJlcXVlc3RpbmcgdXBkYXRlIG9uIHRoZSBjdXJyZW50IGNvbnRleHRcbiAgICBjb25zdCBvcnUgPSBvblJlcXVlc3RVcGRhdGUgfHwgKCgpID0+IHtcbiAgICAgIGN0eC5fcmVxdWVzdFVwZGF0ZSgpO1xuICAgIH0pO1xuXG4gICAgLy8gVHJhY2sgRXhlY3V0aW9uQ29udGV4dHMgY3JlYXRlZCAoYW5kIG5vdCB5ZXQgdGVybWluYXRlZCkgc28gd2UgY2FuIHRlcm1pbmF0ZSB0aGVtIHVwb24gY2xlYW51cFxuICAgIGRhdGEuYWN0aXZlQ29udGV4dHMgPSBuZXcgU2V0KCk7XG5cbiAgICAvLyBDcmVhdGUgXCJmYWN0b3J5XCIgZnVuY3Rpb24gdG8gaW5zdGFudGlhdGUgbmV3IGNvbnRleHRzXG4gICAgZGF0YS5jcmVhdGVDb250ZXh0ID0gKCkgPT4ge1xuICAgICAgY29uc3QgY3R4ID0gbmV3IEV4ZWN1dGlvbkNvbnRleHQoZGF0YS5zdHJlYW1GdW5jLCBvcnUsICgpID0+IHsgZGF0YS5hY3RpdmVDb250ZXh0cy5kZWxldGUoY3R4KTsgfSk7XG4gICAgICBkYXRhLmFjdGl2ZUNvbnRleHRzLmFkZChjdHgpO1xuICAgICAgcmV0dXJuIGN0eDtcbiAgICB9O1xuXG4gICAgcmVjb3JkLmRhdGEgPSBkYXRhO1xuICAgIHJlY29yZC5jbGVhbnVwID0gKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBjdHggb2YgZGF0YS5hY3RpdmVDb250ZXh0cykge1xuICAgICAgICBjdHgudGVybWluYXRlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSB0aGUgc3RyZWFtIGZ1bmN0aW9uIGluIHJlY29yZCBhbmQgYWxsIGFjdGl2ZSBjb250ZXh0cy5cbiAgcmVjb3JkLmRhdGEuc3RyZWFtRnVuYyA9IHN0cmVhbUZ1bmM7XG4gIGZvciAoY29uc3QgY3R4IG9mIHJlY29yZC5kYXRhLmFjdGl2ZUNvbnRleHRzKSB7XG4gICAgY3R4Ll9zZXRTdHJlYW1GdW5jKHN0cmVhbUZ1bmMpO1xuICB9XG5cbiAgY3R4Ll9lbmRIb29rKCk7XG5cbiAgcmV0dXJuIHJlY29yZC5kYXRhLmNyZWF0ZUNvbnRleHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWR1Y2VyKGFjdGlvbkV2dHMsIHJlZHVjZXJGdW5jLCBpbml0aWFsU3RhdGUpIHtcbiAgY29uc3Qgc3RhdGUgPSB1c2VWYXIoaW5pdGlhbFN0YXRlKTtcbiAgY29uc3QgYWN0aW9uID0gdXNlRXZlbnRSZWNlaXZlcihhY3Rpb25FdnRzKTtcbiAgc3RhdGUuY3VycmVudCA9IHJlZHVjZXJGdW5jKGFjdGlvbiwgc3RhdGUuY3VycmVudCk7XG4gIHJldHVybiBzdGF0ZS5jdXJyZW50O1xufVxuXG4vKipcbiAqIFRPRE86IENvdWxkL3Nob3VsZCB0aGlzIHRha2UgYW4gb3B0aW9uYWwgb25SZXF1ZXN0VXBkYXRlIHBhcmFtZXRlcj9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU1hY2hpbmUoc3RhdGVzLCBpbml0aWFsVHJhbnNpdGlvbikge1xuICBjb25zdCBjdHggPSBnZXRUb3BVcGRhdGluZ0V4ZWN1dGlvbkNvbnRleHQoKTtcbiAgY29uc3QgcmVjb3JkID0gY3R4Ll9iZWdpbkhvb2soKTtcblxuICBjb25zdCB0YWtlVHJhbnNpdGlvbiA9ICh0cmFucykgPT4ge1xuICAgIC8vIElmIHRoZXJlJ3MgYW4gb2xkIGNvbnRleHQsIHRlcm1pbmF0ZSBpdFxuICAgIGlmIChyZWNvcmQuZGF0YS5hY3RpdmVDb250ZXh0KSB7XG4gICAgICByZWNvcmQuZGF0YS5hY3RpdmVDb250ZXh0LnRlcm1pbmF0ZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IFtuZXdTdGF0ZSwgbmV3U3RhdGVBcmddID0gdHJhbnM7XG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgY29udGV4dCBhbmQgc3RvcmUgaXQgaW4gcmVjb3JkIChidXQgZG9uJ3QgdXBkYXRlIGl0KVxuICAgIGNvbnN0IG5ld0N0eCA9IG5ldyBFeGVjdXRpb25Db250ZXh0KHN0YXRlc1tuZXdTdGF0ZV0sICgpID0+IHsgY3R4Ll9yZXF1ZXN0VXBkYXRlKCk7IH0pO1xuXG4gICAgcmVjb3JkLmRhdGEuYWN0aXZlU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICByZWNvcmQuZGF0YS5hY3RpdmVDb250ZXh0ID0gbmV3Q3R4O1xuICAgIHJlY29yZC5kYXRhLmFjdGl2ZUFyZ3VtZW50ID0gbmV3U3RhdGVBcmc7XG4gIH07XG5cbiAgaWYgKCFyZWNvcmQuZGF0YSkge1xuICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICByZWNvcmQuZGF0YSA9IGRhdGE7XG5cbiAgICB0YWtlVHJhbnNpdGlvbihpbml0aWFsVHJhbnNpdGlvbik7IC8vIHRoaXMgd2lsbCBzZXQgc3R1ZmYgaW4gcmVjb3JkLmRhdGFcblxuICAgIHJlY29yZC5jbGVhbnVwID0gKCkgPT4ge1xuICAgICAgZGF0YS5hY3RpdmVDb250ZXh0LnRlcm1pbmF0ZSgpO1xuICAgIH07XG4gIH1cblxuICBsZXQgcmV0dmFsO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIC8vIFNldCB0aGUgc3RhdGUgZnVuY3Rpb24gaW4gdGhlIGFjdGl2ZSBjb250ZXh0IChpbiBjYXNlIGl0IGNoYW5nZWQpXG4gICAgcmVjb3JkLmRhdGEuYWN0aXZlQ29udGV4dC5fc2V0U3RyZWFtRnVuYyhzdGF0ZXNbcmVjb3JkLmRhdGEuYWN0aXZlU3RhdGVdKTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgYWN0aXZlIGNvbnRleHRcbiAgICBjb25zdCBbdG1wUmV0dmFsLCB0cmFuc2l0aW9uRXZ0XSA9IHJlY29yZC5kYXRhLmFjdGl2ZUNvbnRleHQudXBkYXRlKHJlY29yZC5kYXRhLmFjdGl2ZUFyZ3VtZW50KTtcbiAgICByZXR2YWwgPSB0bXBSZXR2YWw7XG5cbiAgICAvLyBXYXMgdGhlcmUgYSB0cmFuc2l0aW9uIGV2ZW50P1xuICAgIC8vIE5PVEU6IEJlY2F1c2Ugd2UgdHJhbnNpdGlvbiB1cG9uIGZpcnN0IGV2ZW4gb24gdGhpcyBzdHJlYW0sIHdlIGNhbiBzb3J0IG9mIHNwZWNpYWwtY2FzZSB0aGlzIGNoZWNrXG4gICAgaWYgKHRyYW5zaXRpb25FdnQpIHtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRXZ0LnZhbHVlO1xuICAgICAgdGFrZVRyYW5zaXRpb24odHJhbnNpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZXJlIHdhcyBubyB0cmFuc2l0aW9uXG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBjdHguX2VuZEhvb2soKTtcblxuICByZXR1cm4gcmV0dmFsO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "3c7995ba1ebaeb8df6c62360cd2406d1.mp3";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYW1lbl9icmVhay5tcDM/ZTZjOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIzYzc5OTViYTFlYmFlYjhkZjZjNjIzNjBjZDI0MDZkMS5tcDNcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/riv.js\nvar riv = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/programs.js\n// NOTE: Using require instead of import here makes the thing where we print program text work better.\nconst {\n  useVar,\n  useRequestUpdate,\n  useInitialize,\n  useAsyncEventEmitter,\n  useEventReceiver,\n  useDynamic,\n  useReducer,\n  useMachine\n} = __webpack_require__(0);\n\nconst amen_break_url = __webpack_require__(1);\n\nfunction showString(v) {\n  const elem = useVar(null);\n  useInitialize(() => {\n    elem.current = document.createElement('div');\n    elem.current.style.cssText = 'border: 1px solid red; color: black; font-size: 24px; padding: 5px; margin-top: 20px';\n    elem.current.textContent = '(undefined)';\n    document.body.appendChild(elem.current);\n    return () => {\n      // cleanup\n      document.body.removeChild(elem.current);\n    };\n  });\n  elem.current.textContent = 'showString: ' + (v === undefined ? '(undefined)' : v.toString());\n}\n\nfunction animationTime() {\n  const requestUpdate = useRequestUpdate();\n  const time = useVar();\n  const reqId = useVar();\n  useInitialize(() => {\n    const onFrame = t => {\n      time.current = 0.001 * t;\n      reqId.current = requestAnimationFrame(onFrame); // request another\n\n      requestUpdate();\n    };\n\n    time.current = 0.001 * performance.now();\n    reqId.current = requestAnimationFrame(onFrame);\n    return () => {\n      // cleanup\n      cancelAnimationFrame(reqId.current);\n    };\n  });\n  return time.current;\n}\n\nfunction animationFrameEvts() {\n  const requestUpdate = useRequestUpdate();\n  const reqId = useVar();\n  const [frameEvts, emitFrame] = useAsyncEventEmitter();\n  useInitialize(() => {\n    const onFrame = t => {\n      emitFrame();\n      reqId.current = requestAnimationFrame(onFrame); // request another\n\n      requestUpdate();\n    };\n\n    reqId.current = requestAnimationFrame(onFrame);\n    return () => {\n      // cleanup\n      cancelAnimationFrame(reqId.current);\n    };\n  });\n  return frameEvts;\n}\n\nfunction countEvents(evts) {\n  const count = useVar(0);\n  const event = useEventReceiver(evts);\n\n  if (event) {\n    count.current++;\n  }\n\n  return count.current;\n}\n\nfunction mouseClickEvts() {\n  const requestUpdate = useRequestUpdate();\n  const [clickEvt, emitClick] = useAsyncEventEmitter();\n  useInitialize(() => {\n    const onMouseDown = () => {\n      emitClick();\n      requestUpdate();\n    };\n\n    document.addEventListener('mousedown', onMouseDown);\n    return () => {\n      // cleanup\n      document.removeEventListener('mousedown', onMouseDown);\n    };\n  });\n  return clickEvt;\n}\n\nfunction mouseDown() {\n  const requestUpdate = useRequestUpdate();\n  const isDown = useVar(false); // we can't poll down-ness, so we assume it's initially not down\n\n  useInitialize(() => {\n    const onMouseDown = () => {\n      isDown.current = true;\n      requestUpdate();\n    };\n\n    const onMouseUp = () => {\n      isDown.current = false;\n      requestUpdate();\n    };\n\n    document.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    return () => {\n      // cleanup\n      document.removeEventListener('mousedown', onMouseDown);\n      document.removeEventListener('mouseup', onMouseUp);\n    };\n  });\n  return isDown.current;\n}\n\nfunction mousePosition() {\n  const requestUpdate = useRequestUpdate();\n  const position = useVar({\n    x: 0,\n    y: 0\n  }); // we can't poll position, so start it at origin\n\n  useInitialize(() => {\n    const onMouseMove = e => {\n      position.current = {\n        x: e.clientX || e.pageX,\n        y: e.clientY || e.pageY\n      };\n      requestUpdate();\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n    return () => {\n      // cleanup\n      document.removeEventListener('mousemove', onMouseMove);\n    };\n  });\n  return position.current;\n}\n\nfunction random(repickEvt) {\n  const val = useVar(Math.random());\n  const repick = useEventReceiver(repickEvt);\n\n  if (repick) {\n    val.current = Math.random();\n  }\n\n  return val.current;\n}\n\nfunction audioDriver(generator) {\n  const createGenerator = useDynamic(generator);\n  const generatorCtx = useVar();\n  const frameCount = useVar(0);\n  const sampleRate = useVar();\n  useInitialize(() => {\n    generatorCtx.current = createGenerator();\n    const BUFFER_SIZE = 1024;\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const scriptNode = audioContext.createScriptProcessor(BUFFER_SIZE, 0, 1); // 0 input channels, 1 output channel\n\n    scriptNode.onaudioprocess = e => {\n      const buffer = e.outputBuffer.getChannelData(0);\n\n      for (let i = 0; i < buffer.length; i++) {\n        buffer[i] = generatorCtx.current.update(frameCount.current / sampleRate.current, {\n          value: undefined\n        }, sampleRate.current);\n        frameCount.current++;\n      }\n    };\n\n    scriptNode.connect(audioContext.destination);\n    sampleRate.current = audioContext.sampleRate;\n    return () => {\n      scriptNode.disconnect();\n      audioContext.close();\n    };\n  });\n  /**\n   * Most of our generator updating will happen in the audio processing callback above.\n   * This update here is for when the audioDriver update is called, e.g. when an outer scope\n   * reference that the generator depends on has changed. So we must update the generator,\n   * but don't need its output amplitude.\n   */\n\n  generatorCtx.current.update(frameCount.current / sampleRate.current, undefined, sampleRate.current); // NOTE: we discard retval\n}\n\nfunction sampleUpon(toSample, uponEvt, initialValue) {\n  const held = useVar(initialValue);\n  const upon = useEventReceiver(uponEvt);\n\n  if (upon) {\n    held.current = toSample;\n  }\n\n  return held.current;\n}\n\nfunction everySecond() {\n  const requestUpdate = useRequestUpdate();\n  const [tickEvt, emitTick] = useAsyncEventEmitter();\n  useInitialize(() => {\n    const onInterval = () => {\n      emitTick();\n      requestUpdate();\n    };\n\n    const timerId = setInterval(onInterval, 1000);\n    return () => {\n      // cleanup\n      clearInterval(timerId);\n    };\n  });\n  return tickEvt;\n}\n/**\n * Until audio is loaded and decoded, a single-sample buffer of silence is returned.\n */\n\n\nfunction loadAudioAsArray(url) {\n  const requestUpdate = useRequestUpdate();\n  const pcm = useVar([0]); // until loaded, just return single sample of silence\n\n  useInitialize(() => {\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    let cleanedUp = false;\n    const request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n\n    request.onload = () => {\n      const audioData = request.response;\n      audioCtx.decodeAudioData(audioData, buffer => {\n        if (!cleanedUp) {\n          pcm.current = buffer.getChannelData(0);\n          requestUpdate();\n        }\n      });\n    };\n\n    request.send();\n    return () => {\n      // cleanup\n      request.abort(); // it's safe to always abort here. if already completed, it will be ignored\n      // decodeAudioData cannot be canceled. So to be correct, we must set a flag here to make sure\n      // that decoding is ignored\n\n      cleanedUp = true;\n    };\n  });\n  return pcm.current;\n}\n\nfunction consoleLog(v) {\n  console.log(v);\n}\n\nfunction integral(integrandFunc, time, initialValue = 0) {\n  const accum = useVar(initialValue);\n  const prevTime = useVar(time);\n  const integrand = integrandFunc(accum.current, prevTime.current);\n  accum.current += (time - prevTime.current) * integrand;\n  prevTime.current = time;\n  return accum.current;\n}\n\nfunction expFollow(targetValue, speedConstant, time, initialValue) {\n  return integral(currentValue => speedConstant * (targetValue - currentValue), time, initialValue);\n}\n\nfunction redCircle(position, radius = 25) {\n  const elem = useVar(null);\n  useInitialize(() => {\n    elem.current = document.createElement('div');\n    elem.current.style.cssText = 'position: absolute; border-radius: 50%; background: red; pointer-events: none; user-select: none';\n    document.body.appendChild(elem.current);\n    return () => {\n      // cleanup\n      document.body.removeChild(elem.current);\n    };\n  });\n  const p = position || {\n    x: 0,\n    y: 0\n  };\n\n  if (radius < 0) {\n    radius = 0;\n  }\n\n  const halfRadius = 0.5 * radius;\n  elem.current.style.left = p.x - halfRadius + 'px';\n  elem.current.style.top = p.y - halfRadius + 'px';\n  elem.current.style.width = radius + 'px';\n  elem.current.style.height = radius + 'px';\n}\n\nfunction followAtSpeed2d(target, speed, time, initial) {\n  const pos = useVar(initial);\n  const prevTime = useVar(time);\n  const dt = time - prevTime.current;\n  const delta = {\n    x: target.x - pos.current.x,\n    y: target.y - pos.current.y\n  };\n  const dist = Math.sqrt(delta.x * delta.x + delta.y * delta.y);\n\n  if (speed * dt >= dist) {\n    // Jump to target position\n    pos.current = target;\n  } else {\n    // NOTE: We must not mutate pos.current, since we return that\n    pos.current = {\n      x: pos.current.x + dt * speed * delta.x / dist,\n      y: pos.current.y + dt * speed * delta.y / dist\n    };\n  }\n\n  prevTime.current = time;\n  return pos.current;\n}\n/**\n * Note that this _will_ fire in first call if condition starts truthy\n */\n\n\nfunction eventWhen(condition, valueToEmit) {\n  const prevCondition = useVar(false);\n  const bcond = !!condition;\n  const retval = bcond && !prevCondition.current ? {\n    value: valueToEmit\n  } : undefined;\n  prevCondition.current = bcond;\n  return retval;\n}\n/**\n * Note that seconds argument is only read initially. But valueToEmit is re-read on changes\n */\n\n\nfunction eventAfter(seconds, valueToEmit) {\n  const [evt, emit] = useAsyncEventEmitter();\n  const value = useVar(valueToEmit);\n  value.current = valueToEmit;\n  useInitialize(() => {\n    const timerId = setTimeout(() => {\n      emit(value.current);\n    }, 1000 * seconds);\n    return () => {\n      clearTimeout(timerId);\n    };\n  });\n  return evt;\n}\n\n/* harmony default export */ var programs = ([{\n  name: 'do nothing',\n  main: () => {}\n}, {\n  name: 'animation time',\n  main: () => {\n    showString(animationTime().toFixed(3));\n  }\n}, {\n  name: 'count clicks',\n  main: () => {\n    showString(countEvents(mouseClickEvts()));\n  }\n}, {\n  name: 'is mouse button down',\n  main: () => {\n    showString(mouseDown());\n  }\n}, {\n  name: 'random number, click to repick',\n  main: () => {\n    showString(random(mouseClickEvts()));\n  }\n}, {\n  name: 'audio noise when mouse is down',\n  main: () => {\n    const md = mouseDown();\n    audioDriver((audioTime, advanceFrameEvt) => {\n      const noise = random(advanceFrameEvt) - 0.5;\n      return md ? noise : 0;\n    });\n  }\n}, {\n  name: 'decaying noise upon click',\n  main: () => {\n    const clickEvt = mouseClickEvts();\n    audioDriver((audioTime, advanceFrameEvt) => {\n      const noise = random(advanceFrameEvt) - 0.5;\n      const lastClickTime = sampleUpon(audioTime, clickEvt, -Infinity);\n      const decayingGain = Math.exp(5 * (lastClickTime - audioTime));\n      return decayingGain * noise;\n    });\n  }\n}, {\n  name: 'resetting frame counter, click to reset',\n  main: () => {\n    const frameEvts = animationFrameEvts();\n    const clickEvt = mouseClickEvts();\n    const click = useEventReceiver(clickEvt);\n    const createCounter = useDynamic(countEvents);\n    const activeCounter = useVar();\n\n    if (click) {\n      if (activeCounter.current) {\n        activeCounter.current.terminate();\n      }\n\n      activeCounter.current = createCounter();\n    }\n\n    if (!activeCounter.current) {\n      activeCounter.current = createCounter();\n    }\n\n    const displayedCount = activeCounter.current.update(frameEvts);\n    showString(displayedCount);\n  }\n}, {\n  name: 'dynamic array of async clocks, click to add',\n  main: () => {\n    const clickEvt = mouseClickEvts();\n    const click = useEventReceiver(clickEvt);\n    const createClock = useDynamic(() => countEvents(everySecond()));\n    const clockArray = useVar([]);\n\n    if (click) {\n      clockArray.current.push(createClock());\n    }\n\n    const nums = clockArray.current.map(clock => clock.update());\n    showString(nums.join(' '));\n  }\n}, {\n  name: 'record player spin up/down, hold mouse down and release',\n  main: () => {\n    const pcm = loadAudioAsArray(amen_break_url);\n    showString(pcm.length > 1 ? 'loaded audio' : 'loading audio...');\n    audioDriver((audioTime, advanceFrameEvt, sampleRate) => {\n      const targetSpeed = mouseDown() ? sampleRate : 0;\n      const speed = expFollow(targetSpeed, 3, audioTime, 0);\n      const pos = Math.floor(integral(() => speed, audioTime));\n      return pcm[pos % pcm.length]; // modulo so as to loop\n    });\n  }\n}, {\n  name: 'circle follows mouse',\n  main: () => {\n    redCircle(mousePosition());\n  }\n}, {\n  name: 'circle follows mouse at limited speed',\n  main: () => {\n    const time = animationTime();\n    const mpos = mousePosition();\n    redCircle(followAtSpeed2d(mpos, 300, time, mpos));\n  }\n}, {\n  name: 'circle moves halfway to mouse with each click',\n  main: () => {\n    const midpoint = (a, b) => ({\n      x: 0.5 * (a.x + b.x),\n      y: 0.5 * (a.y + b.y)\n    });\n\n    const mpos = mousePosition();\n    const clickEvt = mouseClickEvts();\n    const cpos = useReducer(clickEvt, (action, prevState) => {\n      return action ? midpoint(prevState, mpos) : prevState;\n    }, {\n      x: 0,\n      y: 0\n    });\n    redCircle(cpos);\n  }\n}, {\n  name: 'roaming circle (state machine)',\n  main: () => {\n    const time = animationTime();\n    const position = useMachine({\n      moving: initialPosition => {\n        const targetPosition = {\n          x: 500 * random(),\n          y: 500 * random()\n        };\n        const position = followAtSpeed2d(targetPosition, 300, time, initialPosition);\n        const arrived = position.x === targetPosition.x && position.y === targetPosition.y;\n        return [position, eventWhen(arrived, ['resting', position])];\n      },\n      resting: initialPosition => {\n        return [initialPosition, eventAfter(random(), ['moving', initialPosition])];\n      }\n    }, ['moving', {\n      x: 0,\n      y: 0\n    }]);\n    redCircle(position);\n  }\n}]);\n// CONCATENATED MODULE: ./src/index.js\n\n\nconst programListElem = document.getElementById('program-list');\nconst programSourceElem = document.getElementById('program-source');\nlet currentContext; // NOTE: This is a hack but works for now\n\nconst fixIndent = code => {\n  return code.split('\\n').map((line, idx) => idx === 0 ? line : line.substr(2)).join('\\n');\n};\n\nconst startProgram = program => {\n  if (currentContext) {\n    currentContext.terminate();\n    currentContext = undefined;\n  }\n\n  programSourceElem.textContent = fixIndent(program.main.toString()); // hacky but works for now\n\n  currentContext = Object(riv[\"createNoInOutExecutionContext\"])(program.main);\n  currentContext.update(); // do initial update. any further updates will be async\n};\n\nfor (const prog of programs) {\n  const anchorElem = document.createElement('a');\n  anchorElem.textContent = prog.name;\n  anchorElem.setAttribute('href', '#');\n\n  (() => {\n    anchorElem.addEventListener('click', e => {\n      e.preventDefault();\n      setTimeout(() => {\n        // start program with delay so it doesn't get this click event\n        startProgram(prog);\n      }, 0);\n    });\n  })();\n\n  const itemElem = document.createElement('li');\n  itemElem.appendChild(anchorElem);\n  programListElem.appendChild(itemElem);\n}\n\nstartProgram(programs[0]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")}]);