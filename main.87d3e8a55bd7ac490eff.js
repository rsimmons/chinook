!function(Q){var n={};function I(B){if(n[B])return n[B].exports;var e=n[B]={i:B,l:!1,exports:{}};return Q[B].call(e.exports,e,e.exports,I),e.l=!0,e.exports}I.m=Q,I.c=n,I.d=function(Q,n,B){I.o(Q,n)||Object.defineProperty(Q,n,{enumerable:!0,get:B})},I.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},I.t=function(Q,n){if(1&n&&(Q=I(Q)),8&n)return Q;if(4&n&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(I.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&n&&"string"!=typeof Q)for(var e in Q)I.d(B,e,function(n){return Q[n]}.bind(null,e));return B},I.n=function(Q){var n=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return I.d(n,"a",n),n},I.o=function(Q,n){return Object.prototype.hasOwnProperty.call(Q,n)},I.p="",I(I.s=11)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNoInOutExecutionContext", function() { return createNoInOutExecutionContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useVar", function() { return useVar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useRequestUpdate", function() { return useRequestUpdate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useInitialize", function() { return useInitialize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useAsyncEventEmitter", function() { return useAsyncEventEmitter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useEventReceiver", function() { return useEventReceiver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useDynamic", function() { return useDynamic; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useReducer", function() { return useReducer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useMachine", function() { return useMachine; });\nlet currentUpdateFrame = null;\n\nclass ExecutionContext {\n  constructor(streamFunc, onRequestUpdate, afterTerminate) {\n    this.streamFunc = streamFunc;\n    this.onRequestUpdate = onRequestUpdate;\n    this.afterTerminate = afterTerminate;\n    this.hookRecordChain = {\n      next: null\n    }; // dummy\n\n    this.recordCursor = null; // only set when this context is updating\n\n    this.updateCount = 0;\n  }\n\n  update() {\n    // Push a new update frame onto the update stack for this context\n    const newFrame = {\n      executionContext: this,\n      previousFrame: currentUpdateFrame\n    };\n    currentUpdateFrame = newFrame; // Move hook record cursor to start of chain\n\n    this.recordCursor = this.hookRecordChain;\n    const retval = this.streamFunc.apply(null, arguments); // This should be null, otherwise there are hook records we didn\'t get to, and something is amiss\n\n    if (this.recordCursor.next) {\n      throw new Error(\'Did not reach all hook records in update\');\n    } // Pop the top frame from the update stack\n\n\n    const poppedFrame = currentUpdateFrame;\n\n    if (!poppedFrame) {\n      throw new Error(\'Cannot pop update frame because current is null\');\n    }\n\n    if (poppedFrame.executionContext !== this) {\n      throw new Error("Popped frame from update stack but context did not match");\n    }\n\n    currentUpdateFrame = poppedFrame.previousFrame;\n    this.updateCount++;\n    return retval;\n  }\n\n  terminate() {\n    // NOTE: Might we want to sanity check that this context isn\'t anywhere in the current update stack?\n    // Call any cleanup functions set by hooks\n    // TODO: Do we need to worry about order?\n    for (let c = this.hookRecordChain.next; c; c = c.next) {\n      if (c.cleanup) {\n        c.cleanup();\n      }\n    }\n\n    if (this.afterTerminate) {\n      this.afterTerminate();\n    }\n  }\n\n  _beginHook() {\n    if (this.updateCount === 0) {\n      if (this.recordCursor.next) {\n        throw new Error(\'Expecting to create new hook record in chain, but already present\');\n      } // Create new record\n\n\n      this.recordCursor.next = {\n        data: undefined,\n        cleanup: undefined,\n        next: null\n      };\n    }\n\n    if (!this.recordCursor.next) {\n      throw new Error(\'Expecting to find hook record in chain, but not present\');\n    }\n\n    return this.recordCursor.next;\n  }\n\n  _endHook() {\n    this.recordCursor = this.recordCursor.next; // move cursor forward\n  }\n\n  _requestUpdate() {\n    this.onRequestUpdate();\n  }\n  /**\n   * This is only safe to do if the replacement function calls the same hooks, has same signature, etc.\n   * It\'s currently used to provide a function that is lexically the same but bound to different outer-scope\n   * variables.\n   */\n\n\n  _setStreamFunc(newStreamFunc) {\n    this.streamFunc = newStreamFunc;\n  }\n\n}\n\nfunction createNoInOutExecutionContext(streamFunc) {\n  const onRequestUpdate = () => {\n    ctx.update();\n  };\n\n  const ctx = new ExecutionContext(streamFunc, onRequestUpdate);\n  return ctx;\n}\n/**\n * This is used by hooks to get the currently updating context (after verifying it is set)\n */\n\nfunction getTopUpdatingExecutionContext() {\n  if (!currentUpdateFrame) {\n    throw new Error(\'Cannot get currently updating execution context because update stack is empty. Was a hook called outside of an execution context update?\');\n  }\n\n  return currentUpdateFrame.executionContext;\n}\n\nfunction useVar(initVal) {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook(); // Create value box if necessary\n\n\n  if (!record.data) {\n    record.data = {\n      current: initVal\n    };\n  }\n\n  ctx._endHook();\n\n  return record.data;\n}\n/**\n * Why do we need a hook? Why can\'t we just call ctx.requestUpdate()? Because the requestUpdate\n * function that we return will often be called without there being any updating execution context\n * (e.g. from an event handler). So it has to be bound to the correct context.\n */\n\nfunction useRequestUpdate() {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook(); // Create callback if necessary. We store it so that we already return the same one.\n\n\n  if (!record.data) {\n    record.data = {\n      requestUpdate: () => {\n        ctx._requestUpdate(); // it\'s important that we use ctx from closure, not getTopUpdatingExecutionContext() here\n\n      }\n    };\n  }\n\n  ctx._endHook();\n\n  return record.data.requestUpdate;\n}\nfunction useInitialize(initializer) {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook(); // Initialize if necessary\n\n\n  if (!record.data) {\n    // data being undefined means this is the first call\n    record.cleanup = initializer();\n    record.data = {}; // no data to store yet, just needs to be truthy to indicate that initialization ran\n  }\n\n  ctx._endHook();\n}\n/**\n * This is effectively a queue with only a single-item capacity, to support async event emission\n */\n\nfunction useAsyncEventEmitter() {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook(); // Initialize record data if necessary\n\n\n  if (!record.data) {\n    const data = {\n      queuedEvent: undefined\n    };\n\n    data.emit = value => {\n      if (data.queuedEvent) {\n        throw new Error(\'Cannot emit another event since one is already enqueued\');\n      }\n\n      data.queuedEvent = {\n        value\n      };\n    };\n\n    record.data = data;\n  }\n\n  let retval;\n\n  if (record.data.queuedEvent) {\n    // Pop queued event\n    retval = record.data.queuedEvent;\n    record.data.queuedEvent = undefined;\n  }\n\n  ctx._endHook();\n\n  return [retval, record.data.emit];\n}\nfunction useEventReceiver(evt) {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook(); // Initialize record data if necessary\n\n\n  if (!record.data) {\n    record.data = {\n      seen: new WeakSet() // event objects we have already seen\n\n    };\n  }\n\n  let retval;\n\n  if (evt) {\n    if (!record.data.seen.has(evt)) {\n      retval = evt;\n      record.data.seen.add(evt);\n    }\n  }\n\n  ctx._endHook();\n\n  return retval;\n}\n/**\n * The streamFunc argument may change, but it should only change to a function that can be safely\n * swapped in (i.e. one that calls the same hooks, etc.). A common case is that streamFunc is a\n * closure that references some outer scope variables, and when those change, a new "version" of\n * the function is created (lexically the same, but closing over a different scope).\n *\n * onRequestUpdate is currently only read on the first call, so changes to it will have no effect.\n */\n\nfunction useDynamic(streamFunc, onRequestUpdate) {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook(); // Initialize record data if necessary\n\n\n  if (!record.data) {\n    const data = {}; // If no onRequestUpdate is provided, default to requesting update on the current context\n\n    const oru = onRequestUpdate || (() => {\n      ctx._requestUpdate();\n    }); // Track ExecutionContexts created (and not yet terminated) so we can terminate them upon cleanup\n\n\n    data.activeContexts = new Set(); // Create "factory" function to instantiate new contexts\n\n    data.createContext = () => {\n      const ctx = new ExecutionContext(data.streamFunc, oru, () => {\n        data.activeContexts.delete(ctx);\n      });\n      data.activeContexts.add(ctx);\n      return ctx;\n    };\n\n    record.data = data;\n\n    record.cleanup = () => {\n      for (const ctx of data.activeContexts) {\n        ctx.terminate();\n      }\n    };\n  } // Update the stream function in record and all active contexts.\n\n\n  record.data.streamFunc = streamFunc;\n\n  for (const ctx of record.data.activeContexts) {\n    ctx._setStreamFunc(streamFunc);\n  }\n\n  ctx._endHook();\n\n  return record.data.createContext;\n}\n/**\n * NOTE: reducerFunc should be pure-pointwise, NOT a stream func\n */\n\nfunction useReducer(actionEvts, reducerFunc, initialState) {\n  const state = useVar(initialState);\n  const action = useEventReceiver(actionEvts);\n\n  if (action) {\n    state.current = reducerFunc(action.value, state.current);\n  }\n\n  return state.current;\n}\n/**\n * TODO: Could/should this take an optional onRequestUpdate parameter?\n */\n\nfunction useMachine(states, initialTransition) {\n  const ctx = getTopUpdatingExecutionContext();\n\n  const record = ctx._beginHook();\n\n  const takeTransition = trans => {\n    // If there\'s an old context, terminate it\n    if (record.data.activeContext) {\n      record.data.activeContext.terminate();\n    }\n\n    const [newState, newStateArg] = trans; // Create a new context and store it in record (but don\'t update it)\n\n    const newCtx = new ExecutionContext(states[newState], () => {\n      ctx._requestUpdate();\n    });\n    record.data.activeState = newState;\n    record.data.activeContext = newCtx;\n    record.data.activeArgument = newStateArg;\n  };\n\n  if (!record.data) {\n    const data = {};\n    record.data = data;\n    takeTransition(initialTransition); // this will set stuff in record.data\n\n    record.cleanup = () => {\n      data.activeContext.terminate();\n    };\n  }\n\n  let retval;\n\n  while (true) {\n    // Set the state function in the active context (in case it changed)\n    record.data.activeContext._setStreamFunc(states[record.data.activeState]); // Update the active context\n\n\n    const [tmpRetval, transitionEvt] = record.data.activeContext.update(record.data.activeArgument);\n    retval = tmpRetval; // Was there a transition event?\n    // NOTE: Because we transition upon first even on this stream, we can sort of special-case this check\n\n    if (transitionEvt) {\n      const transition = transitionEvt.value;\n      takeTransition(transition);\n    } else {\n      // There was no transition\n      break;\n    }\n  }\n\n  ctx._endHook();\n\n  return retval;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcml2LmpzPzgxNWEiXSwibmFtZXMiOlsiY3VycmVudFVwZGF0ZUZyYW1lIiwiRXhlY3V0aW9uQ29udGV4dCIsImNvbnN0cnVjdG9yIiwic3RyZWFtRnVuYyIsIm9uUmVxdWVzdFVwZGF0ZSIsImFmdGVyVGVybWluYXRlIiwiaG9va1JlY29yZENoYWluIiwibmV4dCIsInJlY29yZEN1cnNvciIsInVwZGF0ZUNvdW50IiwidXBkYXRlIiwibmV3RnJhbWUiLCJleGVjdXRpb25Db250ZXh0IiwicHJldmlvdXNGcmFtZSIsInJldHZhbCIsImFwcGx5IiwiYXJndW1lbnRzIiwiRXJyb3IiLCJwb3BwZWRGcmFtZSIsInRlcm1pbmF0ZSIsImMiLCJjbGVhbnVwIiwiX2JlZ2luSG9vayIsImRhdGEiLCJ1bmRlZmluZWQiLCJfZW5kSG9vayIsIl9yZXF1ZXN0VXBkYXRlIiwiX3NldFN0cmVhbUZ1bmMiLCJuZXdTdHJlYW1GdW5jIiwiY3JlYXRlTm9Jbk91dEV4ZWN1dGlvbkNvbnRleHQiLCJjdHgiLCJnZXRUb3BVcGRhdGluZ0V4ZWN1dGlvbkNvbnRleHQiLCJ1c2VWYXIiLCJpbml0VmFsIiwicmVjb3JkIiwiY3VycmVudCIsInVzZVJlcXVlc3RVcGRhdGUiLCJyZXF1ZXN0VXBkYXRlIiwidXNlSW5pdGlhbGl6ZSIsImluaXRpYWxpemVyIiwidXNlQXN5bmNFdmVudEVtaXR0ZXIiLCJxdWV1ZWRFdmVudCIsImVtaXQiLCJ2YWx1ZSIsInVzZUV2ZW50UmVjZWl2ZXIiLCJldnQiLCJzZWVuIiwiV2Vha1NldCIsImhhcyIsImFkZCIsInVzZUR5bmFtaWMiLCJvcnUiLCJhY3RpdmVDb250ZXh0cyIsIlNldCIsImNyZWF0ZUNvbnRleHQiLCJkZWxldGUiLCJ1c2VSZWR1Y2VyIiwiYWN0aW9uRXZ0cyIsInJlZHVjZXJGdW5jIiwiaW5pdGlhbFN0YXRlIiwic3RhdGUiLCJhY3Rpb24iLCJ1c2VNYWNoaW5lIiwic3RhdGVzIiwiaW5pdGlhbFRyYW5zaXRpb24iLCJ0YWtlVHJhbnNpdGlvbiIsInRyYW5zIiwiYWN0aXZlQ29udGV4dCIsIm5ld1N0YXRlIiwibmV3U3RhdGVBcmciLCJuZXdDdHgiLCJhY3RpdmVTdGF0ZSIsImFjdGl2ZUFyZ3VtZW50IiwidG1wUmV0dmFsIiwidHJhbnNpdGlvbkV2dCIsInRyYW5zaXRpb24iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBSUEsa0JBQWtCLEdBQUcsSUFBekI7O0FBRUEsTUFBTUMsZ0JBQU4sQ0FBdUI7QUFDckJDLGFBQVcsQ0FBQ0MsVUFBRCxFQUFhQyxlQUFiLEVBQThCQyxjQUE5QixFQUE4QztBQUN2RCxTQUFLRixVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLFNBQUtDLGVBQUwsR0FBdUJBLGVBQXZCO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQkEsY0FBdEI7QUFFQSxTQUFLQyxlQUFMLEdBQXVCO0FBQUNDLFVBQUksRUFBRTtBQUFQLEtBQXZCLENBTHVELENBS2xCOztBQUNyQyxTQUFLQyxZQUFMLEdBQW9CLElBQXBCLENBTnVELENBTTdCOztBQUMxQixTQUFLQyxXQUFMLEdBQW1CLENBQW5CO0FBQ0Q7O0FBRURDLFFBQU0sR0FBRztBQUNQO0FBQ0EsVUFBTUMsUUFBUSxHQUFHO0FBQ2ZDLHNCQUFnQixFQUFFLElBREg7QUFFZkMsbUJBQWEsRUFBRWI7QUFGQSxLQUFqQjtBQUlBQSxzQkFBa0IsR0FBR1csUUFBckIsQ0FOTyxDQVFQOztBQUNBLFNBQUtILFlBQUwsR0FBb0IsS0FBS0YsZUFBekI7QUFFQSxVQUFNUSxNQUFNLEdBQUcsS0FBS1gsVUFBTCxDQUFnQlksS0FBaEIsQ0FBc0IsSUFBdEIsRUFBNEJDLFNBQTVCLENBQWYsQ0FYTyxDQWFQOztBQUNBLFFBQUksS0FBS1IsWUFBTCxDQUFrQkQsSUFBdEIsRUFBNEI7QUFDMUIsWUFBTSxJQUFJVSxLQUFKLENBQVUsMENBQVYsQ0FBTjtBQUNELEtBaEJNLENBa0JQOzs7QUFD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IiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgY3VycmVudFVwZGF0ZUZyYW1lID0gbnVsbDtcblxuY2xhc3MgRXhlY3V0aW9uQ29udGV4dCB7XG4gIGNvbnN0cnVjdG9yKHN0cmVhbUZ1bmMsIG9uUmVxdWVzdFVwZGF0ZSwgYWZ0ZXJUZXJtaW5hdGUpIHtcbiAgICB0aGlzLnN0cmVhbUZ1bmMgPSBzdHJlYW1GdW5jO1xuICAgIHRoaXMub25SZXF1ZXN0VXBkYXRlID0gb25SZXF1ZXN0VXBkYXRlO1xuICAgIHRoaXMuYWZ0ZXJUZXJtaW5hdGUgPSBhZnRlclRlcm1pbmF0ZTtcblxuICAgIHRoaXMuaG9va1JlY29yZENoYWluID0ge25leHQ6IG51bGx9OyAvLyBkdW1teVxuICAgIHRoaXMucmVjb3JkQ3Vyc29yID0gbnVsbDsgLy8gb25seSBzZXQgd2hlbiB0aGlzIGNvbnRleHQgaXMgdXBkYXRpbmdcbiAgICB0aGlzLnVwZGF0ZUNvdW50ID0gMDtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICAvLyBQdXNoIGEgbmV3IHVwZGF0ZSBmcmFtZSBvbnRvIHRoZSB1cGRhdGUgc3RhY2sgZm9yIHRoaXMgY29udGV4dFxuICAgIGNvbnN0IG5ld0ZyYW1lID0ge1xuICAgICAgZXhlY3V0aW9uQ29udGV4dDogdGhpcyxcbiAgICAgIHByZXZpb3VzRnJhbWU6IGN1cnJlbnRVcGRhdGVGcmFtZSxcbiAgICB9O1xuICAgIGN1cnJlbnRVcGRhdGVGcmFtZSA9IG5ld0ZyYW1lO1xuXG4gICAgLy8gTW92ZSBob29rIHJlY29yZCBjdXJzb3IgdG8gc3RhcnQgb2YgY2hhaW5cbiAgICB0aGlzLnJlY29yZEN1cnNvciA9IHRoaXMuaG9va1JlY29yZENoYWluO1xuXG4gICAgY29uc3QgcmV0dmFsID0gdGhpcy5zdHJlYW1GdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cbiAgICAvLyBUaGlzIHNob3VsZCBiZSBudWxsLCBvdGhlcndpc2UgdGhlcmUgYXJlIGhvb2sgcmVjb3JkcyB3ZSBkaWRuJ3QgZ2V0IHRvLCBhbmQgc29tZXRoaW5nIGlzIGFtaXNzXG4gICAgaWYgKHRoaXMucmVjb3JkQ3Vyc29yLm5leHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGlkIG5vdCByZWFjaCBhbGwgaG9vayByZWNvcmRzIGluIHVwZGF0ZScpO1xuICAgIH1cblxuICAgIC8vIFBvcCB0aGUgdG9wIGZyYW1lIGZyb20gdGhlIHVwZGF0ZSBzdGFja1xuICAgIGNvbnN0IHBvcHBlZEZyYW1lID0gY3VycmVudFVwZGF0ZUZyYW1lO1xuICAgIGlmICghcG9wcGVkRnJhbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHBvcCB1cGRhdGUgZnJhbWUgYmVjYXVzZSBjdXJyZW50IGlzIG51bGwnKTtcbiAgICB9XG4gICAgaWYgKHBvcHBlZEZyYW1lLmV4ZWN1dGlvbkNvbnRleHQgIT09IHRoaXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlBvcHBlZCBmcmFtZSBmcm9tIHVwZGF0ZSBzdGFjayBidXQgY29udGV4dCBkaWQgbm90IG1hdGNoXCIpO1xuICAgIH1cbiAgICBjdXJyZW50VXBkYXRlRnJhbWUgPSBwb3BwZWRGcmFtZS5wcmV2aW91c0ZyYW1lO1xuXG4gICAgdGhpcy51cGRhdGVDb3VudCsrO1xuXG4gICAgcmV0dXJuIHJldHZhbDtcbiAgfVxuXG4gIHRlcm1pbmF0ZSgpIHtcbiAgICAvLyBOT1RFOiBNaWdodCB3ZSB3YW50IHRvIHNhbml0eSBjaGVjayB0aGF0IHRoaXMgY29udGV4dCBpc24ndCBhbnl3aGVyZSBpbiB0aGUgY3VycmVudCB1cGRhdGUgc3RhY2s/XG5cbiAgICAvLyBDYWxsIGFueSBjbGVhbnVwIGZ1bmN0aW9ucyBzZXQgYnkgaG9va3NcbiAgICAvLyBUT0RPOiBEbyB3ZSBuZWVkIHRvIHdvcnJ5IGFib3V0IG9yZGVyP1xuICAgIGZvciAobGV0IGMgPSB0aGlzLmhvb2tSZWNvcmRDaGFpbi5uZXh0OyBjOyBjID0gYy5uZXh0KSB7XG4gICAgICBpZiAoYy5jbGVhbnVwKSB7XG4gICAgICAgIGMuY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmFmdGVyVGVybWluYXRlKSB7XG4gICAgICB0aGlzLmFmdGVyVGVybWluYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgX2JlZ2luSG9vaygpIHtcbiAgICBpZiAodGhpcy51cGRhdGVDb3VudCA9PT0gMCkge1xuICAgICAgaWYgKHRoaXMucmVjb3JkQ3Vyc29yLm5leHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RpbmcgdG8gY3JlYXRlIG5ldyBob29rIHJlY29yZCBpbiBjaGFpbiwgYnV0IGFscmVhZHkgcHJlc2VudCcpO1xuICAgICAgfVxuICAgICAgLy8gQ3JlYXRlIG5ldyByZWNvcmRcbiAgICAgIHRoaXMucmVjb3JkQ3Vyc29yLm5leHQgPSB7XG4gICAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgY2xlYW51cDogdW5kZWZpbmVkLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5yZWNvcmRDdXJzb3IubmV4dCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RpbmcgdG8gZmluZCBob29rIHJlY29yZCBpbiBjaGFpbiwgYnV0IG5vdCBwcmVzZW50Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVjb3JkQ3Vyc29yLm5leHQ7XG4gIH1cblxuICBfZW5kSG9vaygpIHtcbiAgICB0aGlzLnJlY29yZEN1cnNvciA9IHRoaXMucmVjb3JkQ3Vyc29yLm5leHQ7IC8vIG1vdmUgY3Vyc29yIGZvcndhcmRcbiAgfVxuXG4gIF9yZXF1ZXN0VXBkYXRlKCkge1xuICAgIHRoaXMub25SZXF1ZXN0VXBkYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyBvbmx5IHNhZmUgdG8gZG8gaWYgdGhlIHJlcGxhY2VtZW50IGZ1bmN0aW9uIGNhbGxzIHRoZSBzYW1lIGhvb2tzLCBoYXMgc2FtZSBzaWduYXR1cmUsIGV0Yy5cbiAgICogSXQncyBjdXJyZW50bHkgdXNlZCB0byBwcm92aWRlIGEgZnVuY3Rpb24gdGhhdCBpcyBsZXhpY2FsbHkgdGhlIHNhbWUgYnV0IGJvdW5kIHRvIGRpZmZlcmVudCBvdXRlci1zY29wZVxuICAgKiB2YXJpYWJsZXMuXG4gICAqL1xuICBfc2V0U3RyZWFtRnVuYyhuZXdTdHJlYW1GdW5jKSB7XG4gICAgdGhpcy5zdHJlYW1GdW5jID0gbmV3U3RyZWFtRnVuYztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm9Jbk91dEV4ZWN1dGlvbkNvbnRleHQoc3RyZWFtRnVuYykge1xuICBjb25zdCBvblJlcXVlc3RVcGRhdGUgPSAoKSA9PiB7IGN0eC51cGRhdGUoKSB9O1xuICBjb25zdCBjdHggPSBuZXcgRXhlY3V0aW9uQ29udGV4dChzdHJlYW1GdW5jLCBvblJlcXVlc3RVcGRhdGUpXG4gIHJldHVybiBjdHg7XG59XG5cbi8qKlxuICogVGhpcyBpcyB1c2VkIGJ5IGhvb2tzIHRvIGdldCB0aGUgY3VycmVudGx5IHVwZGF0aW5nIGNvbnRleHQgKGFmdGVyIHZlcmlmeWluZyBpdCBpcyBzZXQpXG4gKi9cbmZ1bmN0aW9uIGdldFRvcFVwZGF0aW5nRXhlY3V0aW9uQ29udGV4dCgpIHtcbiAgaWYgKCFjdXJyZW50VXBkYXRlRnJhbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBnZXQgY3VycmVudGx5IHVwZGF0aW5nIGV4ZWN1dGlvbiBjb250ZXh0IGJlY2F1c2UgdXBkYXRlIHN0YWNrIGlzIGVtcHR5LiBXYXMgYSBob29rIGNhbGxlZCBvdXRzaWRlIG9mIGFuIGV4ZWN1dGlvbiBjb250ZXh0IHVwZGF0ZT8nKTtcbiAgfVxuICByZXR1cm4gY3VycmVudFVwZGF0ZUZyYW1lLmV4ZWN1dGlvbkNvbnRleHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VWYXIoaW5pdFZhbCkge1xuICBjb25zdCBjdHggPSBnZXRUb3BVcGRhdGluZ0V4ZWN1dGlvbkNvbnRleHQoKTtcbiAgY29uc3QgcmVjb3JkID0gY3R4Ll9iZWdpbkhvb2soKTtcblxuICAvLyBDcmVhdGUgdmFsdWUgYm94IGlmIG5lY2Vzc2FyeVxuICBpZiAoIXJlY29yZC5kYXRhKSB7XG4gICAgcmVjb3JkLmRhdGEgPSB7Y3VycmVudDogaW5pdFZhbH07XG4gIH1cblxuICBjdHguX2VuZEhvb2soKTtcblxuICByZXR1cm4gcmVjb3JkLmRhdGE7XG59XG5cbi8qKlxuICogV2h5IGRvIHdlIG5lZWQgYSBob29rPyBXaHkgY2FuJ3Qgd2UganVzdCBjYWxsIGN0eC5yZXF1ZXN0VXBkYXRlKCk/IEJlY2F1c2UgdGhlIHJlcXVlc3RVcGRhdGVcbiAqIGZ1bmN0aW9uIHRoYXQgd2UgcmV0dXJuIHdpbGwgb2Z0ZW4gYmUgY2FsbGVkIHdpdGhvdXQgdGhlcmUgYmVpbmcgYW55IHVwZGF0aW5nIGV4ZWN1dGlvbiBjb250ZXh0XG4gKiAoZS5nLiBmcm9tIGFuIGV2ZW50IGhhbmRsZXIpLiBTbyBpdCBoYXMgdG8gYmUgYm91bmQgdG8gdGhlIGNvcnJlY3QgY29udGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlcXVlc3RVcGRhdGUoKSB7XG4gIGNvbnN0IGN0eCA9IGdldFRvcFVwZGF0aW5nRXhlY3V0aW9uQ29udGV4dCgpO1xuICBjb25zdCByZWNvcmQgPSBjdHguX2JlZ2luSG9vaygpO1xuXG4gIC8vIENyZWF0ZSBjYWxsYmFjayBpZiBuZWNlc3NhcnkuIFdlIHN0b3JlIGl0IHNvIHRoYXQgd2UgYWxyZWFkeSByZXR1cm4gdGhlIHNhbWUgb25lLlxuICBpZiAoIXJlY29yZC5kYXRhKSB7XG4gICAgcmVjb3JkLmRhdGEgPSB7cmVxdWVzdFVwZGF0ZTogKCkgPT4ge1xuICAgICAgY3R4Ll9yZXF1ZXN0VXBkYXRlKCk7IC8vIGl0J3MgaW1wb3J0YW50IHRoYXQgd2UgdXNlIGN0eCBmcm9tIGNsb3N1cmUsIG5vdCBnZXRUb3BVcGRhdGluZ0V4ZWN1dGlvbkNvbnRleHQoKSBoZXJlXG4gICAgfX07XG4gIH1cblxuICBjdHguX2VuZEhvb2soKTtcblxuICByZXR1cm4gcmVjb3JkLmRhdGEucmVxdWVzdFVwZGF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUluaXRpYWxpemUoaW5pdGlhbGl6ZXIpIHtcbiAgY29uc3QgY3R4ID0gZ2V0VG9wVXBkYXRpbmdFeGVjdXRpb25Db250ZXh0KCk7XG4gIGNvbnN0IHJlY29yZCA9IGN0eC5fYmVnaW5Ib29rKCk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBpZiBuZWNlc3NhcnlcbiAgaWYgKCFyZWNvcmQuZGF0YSkge1xuICAgIC8vIGRhdGEgYmVpbmcgdW5kZWZpbmVkIG1lYW5zIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGxcblxuICAgIHJlY29yZC5jbGVhbnVwID0gaW5pdGlhbGl6ZXIoKTtcblxuICAgIHJlY29yZC5kYXRhID0ge307IC8vIG5vIGRhdGEgdG8gc3RvcmUgeWV0LCBqdXN0IG5lZWRzIHRvIGJlIHRydXRoeSB0byBpbmRpY2F0ZSB0aGF0IGluaXRpYWxpemF0aW9uIHJhblxuICB9XG5cbiAgY3R4Ll9lbmRIb29rKCk7XG59XG5cbi8qKlxuICogVGhpcyBpcyBlZmZlY3RpdmVseSBhIHF1ZXVlIHdpdGggb25seSBhIHNpbmdsZS1pdGVtIGNhcGFjaXR5LCB0byBzdXBwb3J0IGFzeW5jIGV2ZW50IGVtaXNzaW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VBc3luY0V2ZW50RW1pdHRlcigpIHtcbiAgY29uc3QgY3R4ID0gZ2V0VG9wVXBkYXRpbmdFeGVjdXRpb25Db250ZXh0KCk7XG4gIGNvbnN0IHJlY29yZCA9IGN0eC5fYmVnaW5Ib29rKCk7XG5cbiAgLy8gSW5pdGlhbGl6ZSByZWNvcmQgZGF0YSBpZiBuZWNlc3NhcnlcbiAgaWYgKCFyZWNvcmQuZGF0YSkge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBxdWV1ZWRFdmVudDogdW5kZWZpbmVkLFxuICAgIH07XG5cbiAgICBkYXRhLmVtaXQgPSAodmFsdWUpID0+IHtcbiAgICAgIGlmIChkYXRhLnF1ZXVlZEV2ZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGVtaXQgYW5vdGhlciBldmVudCBzaW5jZSBvbmUgaXMgYWxyZWFkeSBlbnF1ZXVlZCcpO1xuICAgICAgfVxuICAgICAgZGF0YS5xdWV1ZWRFdmVudCA9IHt2YWx1ZX07XG4gICAgfTtcblxuICAgIHJlY29yZC5kYXRhID0gZGF0YTtcbiAgfVxuXG4gIGxldCByZXR2YWw7XG4gIGlmIChyZWNvcmQuZGF0YS5xdWV1ZWRFdmVudCkge1xuICAgIC8vIFBvcCBxdWV1ZWQgZXZlbnRcbiAgICByZXR2YWwgPSByZWNvcmQuZGF0YS5xdWV1ZWRFdmVudDtcbiAgICByZWNvcmQuZGF0YS5xdWV1ZWRFdmVudCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGN0eC5fZW5kSG9vaygpO1xuXG4gIHJldHVybiBbcmV0dmFsLCByZWNvcmQuZGF0YS5lbWl0XTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUV2ZW50UmVjZWl2ZXIoZXZ0KSB7XG4gIGNvbnN0IGN0eCA9IGdldFRvcFVwZGF0aW5nRXhlY3V0aW9uQ29udGV4dCgpO1xuICBjb25zdCByZWNvcmQgPSBjdHguX2JlZ2luSG9vaygpO1xuXG4gIC8vIEluaXRpYWxpemUgcmVjb3JkIGRhdGEgaWYgbmVjZXNzYXJ5XG4gIGlmICghcmVjb3JkLmRhdGEpIHtcbiAgICByZWNvcmQuZGF0YSA9IHtcbiAgICAgIHNlZW46IG5ldyBXZWFrU2V0KCksIC8vIGV2ZW50IG9iamVjdHMgd2UgaGF2ZSBhbHJlYWR5IHNlZW5cbiAgICB9O1xuICB9XG5cbiAgbGV0IHJldHZhbDtcbiAgaWYgKGV2dCkge1xuICAgIGlmICghcmVjb3JkLmRhdGEuc2Vlbi5oYXMoZXZ0KSkge1xuICAgICAgcmV0dmFsID0gZXZ0O1xuICAgICAgcmVjb3JkLmRhdGEuc2Vlbi5hZGQoZXZ0KTtcbiAgICB9XG4gIH1cblxuICBjdHguX2VuZEhvb2soKTtcblxuICByZXR1cm4gcmV0dmFsO1xufVxuXG4vKipcbiAqIFRoZSBzdHJlYW1GdW5jIGFyZ3VtZW50IG1heSBjaGFuZ2UsIGJ1dCBpdCBzaG91bGQgb25seSBjaGFuZ2UgdG8gYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSBzYWZlbHlcbiAqIHN3YXBwZWQgaW4gKGkuZS4gb25lIHRoYXQgY2FsbHMgdGhlIHNhbWUgaG9va3MsIGV0Yy4pLiBBIGNvbW1vbiBjYXNlIGlzIHRoYXQgc3RyZWFtRnVuYyBpcyBhXG4gKiBjbG9zdXJlIHRoYXQgcmVmZXJlbmNlcyBzb21lIG91dGVyIHNjb3BlIHZhcmlhYmxlcywgYW5kIHdoZW4gdGhvc2UgY2hhbmdlLCBhIG5ldyBcInZlcnNpb25cIiBvZlxuICogdGhlIGZ1bmN0aW9uIGlzIGNyZWF0ZWQgKGxleGljYWxseSB0aGUgc2FtZSwgYnV0IGNsb3Npbmcgb3ZlciBhIGRpZmZlcmVudCBzY29wZSkuXG4gKlxuICogb25SZXF1ZXN0VXBkYXRlIGlzIGN1cnJlbnRseSBvbmx5IHJlYWQgb24gdGhlIGZpcnN0IGNhbGwsIHNvIGNoYW5nZXMgdG8gaXQgd2lsbCBoYXZlIG5vIGVmZmVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUR5bmFtaWMoc3RyZWFtRnVuYywgb25SZXF1ZXN0VXBkYXRlKSB7XG4gIGNvbnN0IGN0eCA9IGdldFRvcFVwZGF0aW5nRXhlY3V0aW9uQ29udGV4dCgpO1xuICBjb25zdCByZWNvcmQgPSBjdHguX2JlZ2luSG9vaygpO1xuXG4gIC8vIEluaXRpYWxpemUgcmVjb3JkIGRhdGEgaWYgbmVjZXNzYXJ5XG4gIGlmICghcmVjb3JkLmRhdGEpIHtcbiAgICBjb25zdCBkYXRhID0ge307XG5cbiAgICAvLyBJZiBubyBvblJlcXVlc3RVcGRhdGUgaXMgcHJvdmlkZWQsIGRlZmF1bHQgdG8gcmVxdWVzdGluZyB1cGRhdGUgb24gdGhlIGN1cnJlbnQgY29udGV4dFxuICAgIGNvbnN0IG9ydSA9IG9uUmVxdWVzdFVwZGF0ZSB8fCAoKCkgPT4ge1xuICAgICAgY3R4Ll9yZXF1ZXN0VXBkYXRlKCk7XG4gICAgfSk7XG5cbiAgICAvLyBUcmFjayBFeGVjdXRpb25Db250ZXh0cyBjcmVhdGVkIChhbmQgbm90IHlldCB0ZXJtaW5hdGVkKSBzbyB3ZSBjYW4gdGVybWluYXRlIHRoZW0gdXBvbiBjbGVhbnVwXG4gICAgZGF0YS5hY3RpdmVDb250ZXh0cyA9IG5ldyBTZXQoKTtcblxuICAgIC8vIENyZWF0ZSBcImZhY3RvcnlcIiBmdW5jdGlvbiB0byBpbnN0YW50aWF0ZSBuZXcgY29udGV4dHNcbiAgICBkYXRhLmNyZWF0ZUNvbnRleHQgPSAoKSA9PiB7XG4gICAgICBjb25zdCBjdHggPSBuZXcgRXhlY3V0aW9uQ29udGV4dChkYXRhLnN0cmVhbUZ1bmMsIG9ydSwgKCkgPT4geyBkYXRhLmFjdGl2ZUNvbnRleHRzLmRlbGV0ZShjdHgpOyB9KTtcbiAgICAgIGRhdGEuYWN0aXZlQ29udGV4dHMuYWRkKGN0eCk7XG4gICAgICByZXR1cm4gY3R4O1xuICAgIH07XG5cbiAgICByZWNvcmQuZGF0YSA9IGRhdGE7XG4gICAgcmVjb3JkLmNsZWFudXAgPSAoKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGN0eCBvZiBkYXRhLmFjdGl2ZUNvbnRleHRzKSB7XG4gICAgICAgIGN0eC50ZXJtaW5hdGUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gVXBkYXRlIHRoZSBzdHJlYW0gZnVuY3Rpb24gaW4gcmVjb3JkIGFuZCBhbGwgYWN0aXZlIGNvbnRleHRzLlxuICByZWNvcmQuZGF0YS5zdHJlYW1GdW5jID0gc3RyZWFtRnVuYztcbiAgZm9yIChjb25zdCBjdHggb2YgcmVjb3JkLmRhdGEuYWN0aXZlQ29udGV4dHMpIHtcbiAgICBjdHguX3NldFN0cmVhbUZ1bmMoc3RyZWFtRnVuYyk7XG4gIH1cblxuICBjdHguX2VuZEhvb2soKTtcblxuICByZXR1cm4gcmVjb3JkLmRhdGEuY3JlYXRlQ29udGV4dDtcbn1cblxuLyoqXG4gKiBOT1RFOiByZWR1Y2VyRnVuYyBzaG91bGQgYmUgcHVyZS1wb2ludHdpc2UsIE5PVCBhIHN0cmVhbSBmdW5jXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWR1Y2VyKGFjdGlvbkV2dHMsIHJlZHVjZXJGdW5jLCBpbml0aWFsU3RhdGUpIHtcbiAgY29uc3Qgc3RhdGUgPSB1c2VWYXIoaW5pdGlhbFN0YXRlKTtcbiAgY29uc3QgYWN0aW9uID0gdXNlRXZlbnRSZWNlaXZlcihhY3Rpb25FdnRzKTtcbiAgaWYgKGFjdGlvbikge1xuICAgIHN0YXRlLmN1cnJlbnQgPSByZWR1Y2VyRnVuYyhhY3Rpb24udmFsdWUsIHN0YXRlLmN1cnJlbnQpO1xuICB9XG4gIHJldHVybiBzdGF0ZS5jdXJyZW50O1xufVxuXG4vKipcbiAqIFRPRE86IENvdWxkL3Nob3VsZCB0aGlzIHRha2UgYW4gb3B0aW9uYWwgb25SZXF1ZXN0VXBkYXRlIHBhcmFtZXRlcj9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU1hY2hpbmUoc3RhdGVzLCBpbml0aWFsVHJhbnNpdGlvbikge1xuICBjb25zdCBjdHggPSBnZXRUb3BVcGRhdGluZ0V4ZWN1dGlvbkNvbnRleHQoKTtcbiAgY29uc3QgcmVjb3JkID0gY3R4Ll9iZWdpbkhvb2soKTtcblxuICBjb25zdCB0YWtlVHJhbnNpdGlvbiA9ICh0cmFucykgPT4ge1xuICAgIC8vIElmIHRoZXJlJ3MgYW4gb2xkIGNvbnRleHQsIHRlcm1pbmF0ZSBpdFxuICAgIGlmIChyZWNvcmQuZGF0YS5hY3RpdmVDb250ZXh0KSB7XG4gICAgICByZWNvcmQuZGF0YS5hY3RpdmVDb250ZXh0LnRlcm1pbmF0ZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IFtuZXdTdGF0ZSwgbmV3U3RhdGVBcmddID0gdHJhbnM7XG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgY29udGV4dCBhbmQgc3RvcmUgaXQgaW4gcmVjb3JkIChidXQgZG9uJ3QgdXBkYXRlIGl0KVxuICAgIGNvbnN0IG5ld0N0eCA9IG5ldyBFeGVjdXRpb25Db250ZXh0KHN0YXRlc1tuZXdTdGF0ZV0sICgpID0+IHsgY3R4Ll9yZXF1ZXN0VXBkYXRlKCk7IH0pO1xuXG4gICAgcmVjb3JkLmRhdGEuYWN0aXZlU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICByZWNvcmQuZGF0YS5hY3RpdmVDb250ZXh0ID0gbmV3Q3R4O1xuICAgIHJlY29yZC5kYXRhLmFjdGl2ZUFyZ3VtZW50ID0gbmV3U3RhdGVBcmc7XG4gIH07XG5cbiAgaWYgKCFyZWNvcmQuZGF0YSkge1xuICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICByZWNvcmQuZGF0YSA9IGRhdGE7XG5cbiAgICB0YWtlVHJhbnNpdGlvbihpbml0aWFsVHJhbnNpdGlvbik7IC8vIHRoaXMgd2lsbCBzZXQgc3R1ZmYgaW4gcmVjb3JkLmRhdGFcblxuICAgIHJlY29yZC5jbGVhbnVwID0gKCkgPT4ge1xuICAgICAgZGF0YS5hY3RpdmVDb250ZXh0LnRlcm1pbmF0ZSgpO1xuICAgIH07XG4gIH1cblxuICBsZXQgcmV0dmFsO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIC8vIFNldCB0aGUgc3RhdGUgZnVuY3Rpb24gaW4gdGhlIGFjdGl2ZSBjb250ZXh0IChpbiBjYXNlIGl0IGNoYW5nZWQpXG4gICAgcmVjb3JkLmRhdGEuYWN0aXZlQ29udGV4dC5fc2V0U3RyZWFtRnVuYyhzdGF0ZXNbcmVjb3JkLmRhdGEuYWN0aXZlU3RhdGVdKTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgYWN0aXZlIGNvbnRleHRcbiAgICBjb25zdCBbdG1wUmV0dmFsLCB0cmFuc2l0aW9uRXZ0XSA9IHJlY29yZC5kYXRhLmFjdGl2ZUNvbnRleHQudXBkYXRlKHJlY29yZC5kYXRhLmFjdGl2ZUFyZ3VtZW50KTtcbiAgICByZXR2YWwgPSB0bXBSZXR2YWw7XG5cbiAgICAvLyBXYXMgdGhlcmUgYSB0cmFuc2l0aW9uIGV2ZW50P1xuICAgIC8vIE5PVEU6IEJlY2F1c2Ugd2UgdHJhbnNpdGlvbiB1cG9uIGZpcnN0IGV2ZW4gb24gdGhpcyBzdHJlYW0sIHdlIGNhbiBzb3J0IG9mIHNwZWNpYWwtY2FzZSB0aGlzIGNoZWNrXG4gICAgaWYgKHRyYW5zaXRpb25FdnQpIHtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRXZ0LnZhbHVlO1xuICAgICAgdGFrZVRyYW5zaXRpb24odHJhbnNpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZXJlIHdhcyBubyB0cmFuc2l0aW9uXG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBjdHguX2VuZEhvb2soKTtcblxuICByZXR1cm4gcmV0dmFsO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return h; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderDOMIntoSelector", function() { return renderDOMIntoSelector; });\n/* harmony import */ var _riv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n\n\nconst snabbdom = __webpack_require__(10);\n\nconst patch = snabbdom.init([__webpack_require__(2).default, __webpack_require__(3).default, __webpack_require__(4).default, __webpack_require__(5).default]);\nconst h = __webpack_require__(6).default; // helper function for creating vnodes\n\n/**\n * Note that selector is only read upon init\n */\n\nfunction renderDOMIntoSelector(vnode, containerSelector) {\n  const container = Object(_riv__WEBPACK_IMPORTED_MODULE_0__["useVar"])(document.querySelector(containerSelector));\n  const previousVnode = Object(_riv__WEBPACK_IMPORTED_MODULE_0__["useVar"])();\n  Object(_riv__WEBPACK_IMPORTED_MODULE_0__["useInitialize"])(() => {\n    return () => {\n      // cleanup\n      container.current.innerHTML = \'\'; // I think we want to do this\n    };\n  });\n\n  if (previousVnode.current) {\n    patch(previousVnode.current, vnode);\n  } else {\n    // First patch\n    // Insert a dummy element because snabbdom replaces it (rather than inserting under)\n    const elem = document.createElement(\'div\');\n    container.current.appendChild(elem);\n    patch(elem, vnode);\n  }\n\n  previousVnode.current = vnode;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZG9tLmpzP2NiZjAiXSwibmFtZXMiOlsic25hYmJkb20iLCJyZXF1aXJlIiwicGF0Y2giLCJpbml0IiwiZGVmYXVsdCIsImgiLCJyZW5kZXJET01JbnRvU2VsZWN0b3IiLCJ2bm9kZSIsImNvbnRhaW5lclNlbGVjdG9yIiwiY29udGFpbmVyIiwidXNlVmFyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicHJldmlvdXNWbm9kZSIsInVzZUluaXRpYWxpemUiLCJjdXJyZW50IiwiaW5uZXJIVE1MIiwiZWxlbSIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQSxNQUFNQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsRUFBRCxDQUF4Qjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdGLFFBQVEsQ0FBQ0csSUFBVCxDQUFjLENBQzFCRixtQkFBTyxDQUFDLENBQUQsQ0FBUCxDQUFrQ0csT0FEUixFQUUxQkgsbUJBQU8sQ0FBQyxDQUFELENBQVAsQ0FBdUNHLE9BRmIsRUFHMUJILG1CQUFPLENBQUMsQ0FBRCxDQUFQLENBQWtDRyxPQUhSLEVBSTFCSCxtQkFBTyxDQUFDLENBQUQsQ0FBUCxDQUEyQ0csT0FKakIsQ0FBZCxDQUFkO0FBTU8sTUFBTUMsQ0FBQyxHQUFHSixtQkFBTyxDQUFDLENBQUQsQ0FBUCxDQUFzQkcsT0FBaEMsQyxDQUF5Qzs7QUFFaEQ7Ozs7QUFHTyxTQUFTRSxxQkFBVCxDQUErQkMsS0FBL0IsRUFBc0NDLGlCQUF0QyxFQUF5RDtBQUM5RCxRQUFNQyxTQUFTLEdBQUdDLG1EQUFNLENBQUNDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QkosaUJBQXZCLENBQUQsQ0FBeEI7QUFDQSxRQUFNSyxhQUFhLEdBQUdILG1EQUFNLEVBQTVCO0FBRUFJLDREQUFhLENBQUMsTUFBTTtBQUNsQixXQUFPLE1BQU07QUFBRTtBQUNiTCxlQUFTLENBQUNNLE9BQVYsQ0FBa0JDLFNBQWxCLEdBQThCLEVBQTlCLENBRFcsQ0FDdUI7QUFDbkMsS0FGRDtBQUdELEdBSlksQ0FBYjs7QUFNQSxNQUFJSCxhQUFhLENBQUNFLE9BQWxCLEVBQTJCO0FBQ3pCYixTQUFLLENBQUNXLGFBQWEsQ0FBQ0UsT0FBZixFQUF3QlIsS0FBeEIsQ0FBTDtBQUNELEdBRkQsTUFFTztBQUNMO0FBRUE7QUFDQSxVQUFNVSxJQUFJLEdBQUdOLFFBQVEsQ0FBQ08sYUFBVCxDQUF1QixLQUF2QixDQUFiO0FBQ0FULGFBQVMsQ0FBQ00sT0FBVixDQUFrQkksV0FBbEIsQ0FBOEJGLElBQTlCO0FBRUFmLFNBQUssQ0FBQ2UsSUFBRCxFQUFPVixLQUFQLENBQUw7QUFDRDs7QUFDRE0sZUFBYSxDQUFDRSxPQUFkLEdBQXdCUixLQUF4QjtBQUNEIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VWYXIsIHVzZUluaXRpYWxpemUgfSBmcm9tICcuL3Jpdic7XG5jb25zdCBzbmFiYmRvbSA9IHJlcXVpcmUoJ3NuYWJiZG9tJyk7XG5jb25zdCBwYXRjaCA9IHNuYWJiZG9tLmluaXQoW1xuICByZXF1aXJlKCdzbmFiYmRvbS9tb2R1bGVzL2NsYXNzJykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnc25hYmJkb20vbW9kdWxlcy9hdHRyaWJ1dGVzJykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnc25hYmJkb20vbW9kdWxlcy9zdHlsZScpLmRlZmF1bHQsXG4gIHJlcXVpcmUoJ3NuYWJiZG9tL21vZHVsZXMvZXZlbnRsaXN0ZW5lcnMnKS5kZWZhdWx0LFxuXSk7XG5leHBvcnQgY29uc3QgaCA9IHJlcXVpcmUoJ3NuYWJiZG9tL2gnKS5kZWZhdWx0OyAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIHZub2Rlc1xuXG4vKipcbiAqIE5vdGUgdGhhdCBzZWxlY3RvciBpcyBvbmx5IHJlYWQgdXBvbiBpbml0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJET01JbnRvU2VsZWN0b3Iodm5vZGUsIGNvbnRhaW5lclNlbGVjdG9yKSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IHVzZVZhcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKSk7XG4gIGNvbnN0IHByZXZpb3VzVm5vZGUgPSB1c2VWYXIoKTtcblxuICB1c2VJbml0aWFsaXplKCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4geyAvLyBjbGVhbnVwXG4gICAgICBjb250YWluZXIuY3VycmVudC5pbm5lckhUTUwgPSAnJzsgLy8gSSB0aGluayB3ZSB3YW50IHRvIGRvIHRoaXNcbiAgICB9O1xuICB9KTtcblxuICBpZiAocHJldmlvdXNWbm9kZS5jdXJyZW50KSB7XG4gICAgcGF0Y2gocHJldmlvdXNWbm9kZS5jdXJyZW50LCB2bm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gRmlyc3QgcGF0Y2hcblxuICAgIC8vIEluc2VydCBhIGR1bW15IGVsZW1lbnQgYmVjYXVzZSBzbmFiYmRvbSByZXBsYWNlcyBpdCAocmF0aGVyIHRoYW4gaW5zZXJ0aW5nIHVuZGVyKVxuICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuY3VycmVudC5hcHBlbmRDaGlsZChlbGVtKTtcblxuICAgIHBhdGNoKGVsZW0sIHZub2RlKTtcbiAgfVxuICBwcmV2aW91c1Zub2RlLmN1cnJlbnQgPSB2bm9kZTtcbn1cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction updateClass(oldVnode, vnode) {\n    var cur, name, elm = vnode.elm, oldClass = oldVnode.data.class, klass = vnode.data.class;\n    if (!oldClass && !klass)\n        return;\n    if (oldClass === klass)\n        return;\n    oldClass = oldClass || {};\n    klass = klass || {};\n    for (name in oldClass) {\n        if (!klass[name]) {\n            elm.classList.remove(name);\n        }\n    }\n    for (name in klass) {\n        cur = klass[name];\n        if (cur !== oldClass[name]) {\n            elm.classList[cur ? 'add' : 'remove'](name);\n        }\n    }\n}\nexports.classModule = { create: updateClass, update: updateClass };\nexports.default = exports.classModule;\n//# sourceMappingURL=class.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20vbW9kdWxlcy9jbGFzcy5qcz9mOTIzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBjdXIsIG5hbWUsIGVsbSA9IHZub2RlLmVsbSwgb2xkQ2xhc3MgPSBvbGRWbm9kZS5kYXRhLmNsYXNzLCBrbGFzcyA9IHZub2RlLmRhdGEuY2xhc3M7XG4gICAgaWYgKCFvbGRDbGFzcyAmJiAha2xhc3MpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAob2xkQ2xhc3MgPT09IGtsYXNzKVxuICAgICAgICByZXR1cm47XG4gICAgb2xkQ2xhc3MgPSBvbGRDbGFzcyB8fCB7fTtcbiAgICBrbGFzcyA9IGtsYXNzIHx8IHt9O1xuICAgIGZvciAobmFtZSBpbiBvbGRDbGFzcykge1xuICAgICAgICBpZiAoIWtsYXNzW25hbWVdKSB7XG4gICAgICAgICAgICBlbG0uY2xhc3NMaXN0LnJlbW92ZShuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKG5hbWUgaW4ga2xhc3MpIHtcbiAgICAgICAgY3VyID0ga2xhc3NbbmFtZV07XG4gICAgICAgIGlmIChjdXIgIT09IG9sZENsYXNzW25hbWVdKSB7XG4gICAgICAgICAgICBlbG0uY2xhc3NMaXN0W2N1ciA/ICdhZGQnIDogJ3JlbW92ZSddKG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5jbGFzc01vZHVsZSA9IHsgY3JlYXRlOiB1cGRhdGVDbGFzcywgdXBkYXRlOiB1cGRhdGVDbGFzcyB9O1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5jbGFzc01vZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsYXNzLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xmlNS = 'http://www.w3.org/XML/1998/namespace';\nvar colonChar = 58;\nvar xChar = 120;\nfunction updateAttrs(oldVnode, vnode) {\n    var key, elm = vnode.elm, oldAttrs = oldVnode.data.attrs, attrs = vnode.data.attrs;\n    if (!oldAttrs && !attrs)\n        return;\n    if (oldAttrs === attrs)\n        return;\n    oldAttrs = oldAttrs || {};\n    attrs = attrs || {};\n    // update modified attributes, add new attributes\n    for (key in attrs) {\n        var cur = attrs[key];\n        var old = oldAttrs[key];\n        if (old !== cur) {\n            if (cur === true) {\n                elm.setAttribute(key, \"\");\n            }\n            else if (cur === false) {\n                elm.removeAttribute(key);\n            }\n            else {\n                if (key.charCodeAt(0) !== xChar) {\n                    elm.setAttribute(key, cur);\n                }\n                else if (key.charCodeAt(3) === colonChar) {\n                    // Assume xml namespace\n                    elm.setAttributeNS(xmlNS, key, cur);\n                }\n                else if (key.charCodeAt(5) === colonChar) {\n                    // Assume xlink namespace\n                    elm.setAttributeNS(xlinkNS, key, cur);\n                }\n                else {\n                    elm.setAttribute(key, cur);\n                }\n            }\n        }\n    }\n    // remove removed attributes\n    // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)\n    // the other option is to remove all attributes with value == undefined\n    for (key in oldAttrs) {\n        if (!(key in attrs)) {\n            elm.removeAttribute(key);\n        }\n    }\n}\nexports.attributesModule = { create: updateAttrs, update: updateAttrs };\nexports.default = exports.attributesModule;\n//# sourceMappingURL=attributes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20vbW9kdWxlcy9hdHRyaWJ1dGVzLmpzP2ZmNzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG52YXIgeG1sTlMgPSAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJztcbnZhciBjb2xvbkNoYXIgPSA1ODtcbnZhciB4Q2hhciA9IDEyMDtcbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBrZXksIGVsbSA9IHZub2RlLmVsbSwgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzLCBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnM7XG4gICAgaWYgKCFvbGRBdHRycyAmJiAhYXR0cnMpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAob2xkQXR0cnMgPT09IGF0dHJzKVxuICAgICAgICByZXR1cm47XG4gICAgb2xkQXR0cnMgPSBvbGRBdHRycyB8fCB7fTtcbiAgICBhdHRycyA9IGF0dHJzIHx8IHt9O1xuICAgIC8vIHVwZGF0ZSBtb2RpZmllZCBhdHRyaWJ1dGVzLCBhZGQgbmV3IGF0dHJpYnV0ZXNcbiAgICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgICAgICB2YXIgY3VyID0gYXR0cnNba2V5XTtcbiAgICAgICAgdmFyIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgICAgICAgaWYgKGN1ciA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoa2V5LCBcIlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGN1ciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5LmNoYXJDb2RlQXQoMCkgIT09IHhDaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoa2V5LCBjdXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkuY2hhckNvZGVBdCgzKSA9PT0gY29sb25DaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtZSB4bWwgbmFtZXNwYWNlXG4gICAgICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGVOUyh4bWxOUywga2V5LCBjdXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkuY2hhckNvZGVBdCg1KSA9PT0gY29sb25DaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtZSB4bGluayBuYW1lc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgZWxtLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgY3VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoa2V5LCBjdXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyByZW1vdmUgcmVtb3ZlZCBhdHRyaWJ1dGVzXG4gICAgLy8gdXNlIGBpbmAgb3BlcmF0b3Igc2luY2UgdGhlIHByZXZpb3VzIGBmb3JgIGl0ZXJhdGlvbiB1c2VzIGl0ICguaS5lLiBhZGQgZXZlbiBhdHRyaWJ1dGVzIHdpdGggdW5kZWZpbmVkIHZhbHVlKVxuICAgIC8vIHRoZSBvdGhlciBvcHRpb24gaXMgdG8gcmVtb3ZlIGFsbCBhdHRyaWJ1dGVzIHdpdGggdmFsdWUgPT0gdW5kZWZpbmVkXG4gICAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIGF0dHJzKSkge1xuICAgICAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5hdHRyaWJ1dGVzTW9kdWxlID0geyBjcmVhdGU6IHVwZGF0ZUF0dHJzLCB1cGRhdGU6IHVwZGF0ZUF0dHJzIH07XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmF0dHJpYnV0ZXNNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdHRyaWJ1dGVzLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Bindig `requestAnimationFrame` like this fixes a bug in IE/Edge. See #360 and #409.\nvar raf = (typeof window !== 'undefined' && (window.requestAnimationFrame).bind(window)) || setTimeout;\nvar nextFrame = function (fn) { raf(function () { raf(fn); }); };\nvar reflowForced = false;\nfunction setNextFrame(obj, prop, val) {\n    nextFrame(function () { obj[prop] = val; });\n}\nfunction updateStyle(oldVnode, vnode) {\n    var cur, name, elm = vnode.elm, oldStyle = oldVnode.data.style, style = vnode.data.style;\n    if (!oldStyle && !style)\n        return;\n    if (oldStyle === style)\n        return;\n    oldStyle = oldStyle || {};\n    style = style || {};\n    var oldHasDel = 'delayed' in oldStyle;\n    for (name in oldStyle) {\n        if (!style[name]) {\n            if (name[0] === '-' && name[1] === '-') {\n                elm.style.removeProperty(name);\n            }\n            else {\n                elm.style[name] = '';\n            }\n        }\n    }\n    for (name in style) {\n        cur = style[name];\n        if (name === 'delayed' && style.delayed) {\n            for (var name2 in style.delayed) {\n                cur = style.delayed[name2];\n                if (!oldHasDel || cur !== oldStyle.delayed[name2]) {\n                    setNextFrame(elm.style, name2, cur);\n                }\n            }\n        }\n        else if (name !== 'remove' && cur !== oldStyle[name]) {\n            if (name[0] === '-' && name[1] === '-') {\n                elm.style.setProperty(name, cur);\n            }\n            else {\n                elm.style[name] = cur;\n            }\n        }\n    }\n}\nfunction applyDestroyStyle(vnode) {\n    var style, name, elm = vnode.elm, s = vnode.data.style;\n    if (!s || !(style = s.destroy))\n        return;\n    for (name in style) {\n        elm.style[name] = style[name];\n    }\n}\nfunction applyRemoveStyle(vnode, rm) {\n    var s = vnode.data.style;\n    if (!s || !s.remove) {\n        rm();\n        return;\n    }\n    if (!reflowForced) {\n        getComputedStyle(document.body).transform;\n        reflowForced = true;\n    }\n    var name, elm = vnode.elm, i = 0, compStyle, style = s.remove, amount = 0, applied = [];\n    for (name in style) {\n        applied.push(name);\n        elm.style[name] = style[name];\n    }\n    compStyle = getComputedStyle(elm);\n    var props = compStyle['transition-property'].split(', ');\n    for (; i < props.length; ++i) {\n        if (applied.indexOf(props[i]) !== -1)\n            amount++;\n    }\n    elm.addEventListener('transitionend', function (ev) {\n        if (ev.target === elm)\n            --amount;\n        if (amount === 0)\n            rm();\n    });\n}\nfunction forceReflow() {\n    reflowForced = false;\n}\nexports.styleModule = {\n    pre: forceReflow,\n    create: updateStyle,\n    update: updateStyle,\n    destroy: applyDestroyStyle,\n    remove: applyRemoveStyle\n};\nexports.default = exports.styleModule;\n//# sourceMappingURL=style.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20vbW9kdWxlcy9zdHlsZS5qcz85MDE2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBLCtCQUErQixrQkFBa0IsU0FBUyxFQUFFLEVBQUU7QUFDOUQ7QUFDQTtBQUNBLDJCQUEyQixpQkFBaUIsRUFBRTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxrQkFBa0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBCaW5kaWcgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAgbGlrZSB0aGlzIGZpeGVzIGEgYnVnIGluIElFL0VkZ2UuIFNlZSAjMzYwIGFuZCAjNDA5LlxudmFyIHJhZiA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkuYmluZCh3aW5kb3cpKSB8fCBzZXRUaW1lb3V0O1xudmFyIG5leHRGcmFtZSA9IGZ1bmN0aW9uIChmbikgeyByYWYoZnVuY3Rpb24gKCkgeyByYWYoZm4pOyB9KTsgfTtcbnZhciByZWZsb3dGb3JjZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNldE5leHRGcmFtZShvYmosIHByb3AsIHZhbCkge1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7IG9ialtwcm9wXSA9IHZhbDsgfSk7XG59XG5mdW5jdGlvbiB1cGRhdGVTdHlsZShvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgY3VyLCBuYW1lLCBlbG0gPSB2bm9kZS5lbG0sIG9sZFN0eWxlID0gb2xkVm5vZGUuZGF0YS5zdHlsZSwgc3R5bGUgPSB2bm9kZS5kYXRhLnN0eWxlO1xuICAgIGlmICghb2xkU3R5bGUgJiYgIXN0eWxlKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKG9sZFN0eWxlID09PSBzdHlsZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIG9sZFN0eWxlID0gb2xkU3R5bGUgfHwge307XG4gICAgc3R5bGUgPSBzdHlsZSB8fCB7fTtcbiAgICB2YXIgb2xkSGFzRGVsID0gJ2RlbGF5ZWQnIGluIG9sZFN0eWxlO1xuICAgIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgICAgICBpZiAoIXN0eWxlW25hbWVdKSB7XG4gICAgICAgICAgICBpZiAobmFtZVswXSA9PT0gJy0nICYmIG5hbWVbMV0gPT09ICctJykge1xuICAgICAgICAgICAgICAgIGVsbS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsbS5zdHlsZVtuYW1lXSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAobmFtZSBpbiBzdHlsZSkge1xuICAgICAgICBjdXIgPSBzdHlsZVtuYW1lXTtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdkZWxheWVkJyAmJiBzdHlsZS5kZWxheWVkKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuYW1lMiBpbiBzdHlsZS5kZWxheWVkKSB7XG4gICAgICAgICAgICAgICAgY3VyID0gc3R5bGUuZGVsYXllZFtuYW1lMl07XG4gICAgICAgICAgICAgICAgaWYgKCFvbGRIYXNEZWwgfHwgY3VyICE9PSBvbGRTdHlsZS5kZWxheWVkW25hbWUyXSkge1xuICAgICAgICAgICAgICAgICAgICBzZXROZXh0RnJhbWUoZWxtLnN0eWxlLCBuYW1lMiwgY3VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSAhPT0gJ3JlbW92ZScgJiYgY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgICAgICAgaWYgKG5hbWVbMF0gPT09ICctJyAmJiBuYW1lWzFdID09PSAnLScpIHtcbiAgICAgICAgICAgICAgICBlbG0uc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgY3VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsbS5zdHlsZVtuYW1lXSA9IGN1cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGFwcGx5RGVzdHJveVN0eWxlKHZub2RlKSB7XG4gICAgdmFyIHN0eWxlLCBuYW1lLCBlbG0gPSB2bm9kZS5lbG0sIHMgPSB2bm9kZS5kYXRhLnN0eWxlO1xuICAgIGlmICghcyB8fCAhKHN0eWxlID0gcy5kZXN0cm95KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGZvciAobmFtZSBpbiBzdHlsZSkge1xuICAgICAgICBlbG0uc3R5bGVbbmFtZV0gPSBzdHlsZVtuYW1lXTtcbiAgICB9XG59XG5mdW5jdGlvbiBhcHBseVJlbW92ZVN0eWxlKHZub2RlLCBybSkge1xuICAgIHZhciBzID0gdm5vZGUuZGF0YS5zdHlsZTtcbiAgICBpZiAoIXMgfHwgIXMucmVtb3ZlKSB7XG4gICAgICAgIHJtKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFyZWZsb3dGb3JjZWQpIHtcbiAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KS50cmFuc2Zvcm07XG4gICAgICAgIHJlZmxvd0ZvcmNlZCA9IHRydWU7XG4gICAgfVxuICAgIHZhciBuYW1lLCBlbG0gPSB2bm9kZS5lbG0sIGkgPSAwLCBjb21wU3R5bGUsIHN0eWxlID0gcy5yZW1vdmUsIGFtb3VudCA9IDAsIGFwcGxpZWQgPSBbXTtcbiAgICBmb3IgKG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgYXBwbGllZC5wdXNoKG5hbWUpO1xuICAgICAgICBlbG0uc3R5bGVbbmFtZV0gPSBzdHlsZVtuYW1lXTtcbiAgICB9XG4gICAgY29tcFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbG0pO1xuICAgIHZhciBwcm9wcyA9IGNvbXBTdHlsZVsndHJhbnNpdGlvbi1wcm9wZXJ0eSddLnNwbGl0KCcsICcpO1xuICAgIGZvciAoOyBpIDwgcHJvcHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGFwcGxpZWQuaW5kZXhPZihwcm9wc1tpXSkgIT09IC0xKVxuICAgICAgICAgICAgYW1vdW50Kys7XG4gICAgfVxuICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIGlmIChldi50YXJnZXQgPT09IGVsbSlcbiAgICAgICAgICAgIC0tYW1vdW50O1xuICAgICAgICBpZiAoYW1vdW50ID09PSAwKVxuICAgICAgICAgICAgcm0oKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZvcmNlUmVmbG93KCkge1xuICAgIHJlZmxvd0ZvcmNlZCA9IGZhbHNlO1xufVxuZXhwb3J0cy5zdHlsZU1vZHVsZSA9IHtcbiAgICBwcmU6IGZvcmNlUmVmbG93LFxuICAgIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gICAgdXBkYXRlOiB1cGRhdGVTdHlsZSxcbiAgICBkZXN0cm95OiBhcHBseURlc3Ryb3lTdHlsZSxcbiAgICByZW1vdmU6IGFwcGx5UmVtb3ZlU3R5bGVcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlTW9kdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGUuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nfunction invokeHandler(handler, vnode, event) {\n    if (typeof handler === "function") {\n        // call function handler\n        handler.call(vnode, event, vnode);\n    }\n    else if (typeof handler === "object") {\n        // call handler with arguments\n        if (typeof handler[0] === "function") {\n            // special case for single argument for performance\n            if (handler.length === 2) {\n                handler[0].call(vnode, handler[1], event, vnode);\n            }\n            else {\n                var args = handler.slice(1);\n                args.push(event);\n                args.push(vnode);\n                handler[0].apply(vnode, args);\n            }\n        }\n        else {\n            // call multiple handlers\n            for (var i = 0; i < handler.length; i++) {\n                invokeHandler(handler[i], vnode, event);\n            }\n        }\n    }\n}\nfunction handleEvent(event, vnode) {\n    var name = event.type, on = vnode.data.on;\n    // call event handler(s) if exists\n    if (on && on[name]) {\n        invokeHandler(on[name], vnode, event);\n    }\n}\nfunction createListener() {\n    return function handler(event) {\n        handleEvent(event, handler.vnode);\n    };\n}\nfunction updateEventListeners(oldVnode, vnode) {\n    var oldOn = oldVnode.data.on, oldListener = oldVnode.listener, oldElm = oldVnode.elm, on = vnode && vnode.data.on, elm = (vnode && vnode.elm), name;\n    // optimization for reused immutable handlers\n    if (oldOn === on) {\n        return;\n    }\n    // remove existing listeners which no longer used\n    if (oldOn && oldListener) {\n        // if element changed or deleted we remove all existing listeners unconditionally\n        if (!on) {\n            for (name in oldOn) {\n                // remove listener if element was changed or existing listeners removed\n                oldElm.removeEventListener(name, oldListener, false);\n            }\n        }\n        else {\n            for (name in oldOn) {\n                // remove listener if existing listener removed\n                if (!on[name]) {\n                    oldElm.removeEventListener(name, oldListener, false);\n                }\n            }\n        }\n    }\n    // add new listeners which has not already attached\n    if (on) {\n        // reuse existing listener or create new\n        var listener = vnode.listener = oldVnode.listener || createListener();\n        // update vnode for listener\n        listener.vnode = vnode;\n        // if element changed or added we add all needed listeners unconditionally\n        if (!oldOn) {\n            for (name in on) {\n                // add listener if element was changed or new listeners added\n                elm.addEventListener(name, listener, false);\n            }\n        }\n        else {\n            for (name in on) {\n                // add listener if new listener added\n                if (!oldOn[name]) {\n                    elm.addEventListener(name, listener, false);\n                }\n            }\n        }\n    }\n}\nexports.eventListenersModule = {\n    create: updateEventListeners,\n    update: updateEventListeners,\n    destroy: updateEventListeners\n};\nexports.default = exports.eventListenersModule;\n//# sourceMappingURL=eventlisteners.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20vbW9kdWxlcy9ldmVudGxpc3RlbmVycy5qcz82OTA3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG9CQUFvQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGludm9rZUhhbmRsZXIoaGFuZGxlciwgdm5vZGUsIGV2ZW50KSB7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgLy8gY2FsbCBmdW5jdGlvbiBoYW5kbGVyXG4gICAgICAgIGhhbmRsZXIuY2FsbCh2bm9kZSwgZXZlbnQsIHZub2RlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGhhbmRsZXIgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgLy8gY2FsbCBoYW5kbGVyIHdpdGggYXJndW1lbnRzXG4gICAgICAgIGlmICh0eXBlb2YgaGFuZGxlclswXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIHNpbmdsZSBhcmd1bWVudCBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgICAgIGlmIChoYW5kbGVyLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJbMF0uY2FsbCh2bm9kZSwgaGFuZGxlclsxXSwgZXZlbnQsIHZub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gaGFuZGxlci5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICBhcmdzLnB1c2goZXZlbnQpO1xuICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh2bm9kZSk7XG4gICAgICAgICAgICAgICAgaGFuZGxlclswXS5hcHBseSh2bm9kZSwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBjYWxsIG11bHRpcGxlIGhhbmRsZXJzXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpbnZva2VIYW5kbGVyKGhhbmRsZXJbaV0sIHZub2RlLCBldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFdmVudChldmVudCwgdm5vZGUpIHtcbiAgICB2YXIgbmFtZSA9IGV2ZW50LnR5cGUsIG9uID0gdm5vZGUuZGF0YS5vbjtcbiAgICAvLyBjYWxsIGV2ZW50IGhhbmRsZXIocykgaWYgZXhpc3RzXG4gICAgaWYgKG9uICYmIG9uW25hbWVdKSB7XG4gICAgICAgIGludm9rZUhhbmRsZXIob25bbmFtZV0sIHZub2RlLCBldmVudCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXIoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgaGFuZGxlRXZlbnQoZXZlbnQsIGhhbmRsZXIudm5vZGUpO1xuICAgIH07XG59XG5mdW5jdGlvbiB1cGRhdGVFdmVudExpc3RlbmVycyhvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uLCBvbGRMaXN0ZW5lciA9IG9sZFZub2RlLmxpc3RlbmVyLCBvbGRFbG0gPSBvbGRWbm9kZS5lbG0sIG9uID0gdm5vZGUgJiYgdm5vZGUuZGF0YS5vbiwgZWxtID0gKHZub2RlICYmIHZub2RlLmVsbSksIG5hbWU7XG4gICAgLy8gb3B0aW1pemF0aW9uIGZvciByZXVzZWQgaW1tdXRhYmxlIGhhbmRsZXJzXG4gICAgaWYgKG9sZE9uID09PSBvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHJlbW92ZSBleGlzdGluZyBsaXN0ZW5lcnMgd2hpY2ggbm8gbG9uZ2VyIHVzZWRcbiAgICBpZiAob2xkT24gJiYgb2xkTGlzdGVuZXIpIHtcbiAgICAgICAgLy8gaWYgZWxlbWVudCBjaGFuZ2VkIG9yIGRlbGV0ZWQgd2UgcmVtb3ZlIGFsbCBleGlzdGluZyBsaXN0ZW5lcnMgdW5jb25kaXRpb25hbGx5XG4gICAgICAgIGlmICghb24pIHtcbiAgICAgICAgICAgIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBsaXN0ZW5lciBpZiBlbGVtZW50IHdhcyBjaGFuZ2VkIG9yIGV4aXN0aW5nIGxpc3RlbmVycyByZW1vdmVkXG4gICAgICAgICAgICAgICAgb2xkRWxtLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgb2xkTGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBsaXN0ZW5lciBpZiBleGlzdGluZyBsaXN0ZW5lciByZW1vdmVkXG4gICAgICAgICAgICAgICAgaWYgKCFvbltuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBvbGRFbG0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBvbGRMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBhZGQgbmV3IGxpc3RlbmVycyB3aGljaCBoYXMgbm90IGFscmVhZHkgYXR0YWNoZWRcbiAgICBpZiAob24pIHtcbiAgICAgICAgLy8gcmV1c2UgZXhpc3RpbmcgbGlzdGVuZXIgb3IgY3JlYXRlIG5ld1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSB2bm9kZS5saXN0ZW5lciA9IG9sZFZub2RlLmxpc3RlbmVyIHx8IGNyZWF0ZUxpc3RlbmVyKCk7XG4gICAgICAgIC8vIHVwZGF0ZSB2bm9kZSBmb3IgbGlzdGVuZXJcbiAgICAgICAgbGlzdGVuZXIudm5vZGUgPSB2bm9kZTtcbiAgICAgICAgLy8gaWYgZWxlbWVudCBjaGFuZ2VkIG9yIGFkZGVkIHdlIGFkZCBhbGwgbmVlZGVkIGxpc3RlbmVycyB1bmNvbmRpdGlvbmFsbHlcbiAgICAgICAgaWYgKCFvbGRPbikge1xuICAgICAgICAgICAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgICAgICAgICAgICAgLy8gYWRkIGxpc3RlbmVyIGlmIGVsZW1lbnQgd2FzIGNoYW5nZWQgb3IgbmV3IGxpc3RlbmVycyBhZGRlZFxuICAgICAgICAgICAgICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICAgICAgICAgICAgICAvLyBhZGQgbGlzdGVuZXIgaWYgbmV3IGxpc3RlbmVyIGFkZGVkXG4gICAgICAgICAgICAgICAgaWYgKCFvbGRPbltuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZXZlbnRMaXN0ZW5lcnNNb2R1bGUgPSB7XG4gICAgY3JlYXRlOiB1cGRhdGVFdmVudExpc3RlbmVycyxcbiAgICB1cGRhdGU6IHVwZGF0ZUV2ZW50TGlzdGVuZXJzLFxuICAgIGRlc3Ryb3k6IHVwZGF0ZUV2ZW50TGlzdGVuZXJzXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5ldmVudExpc3RlbmVyc01vZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50bGlzdGVuZXJzLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vnode_1 = __webpack_require__(7);\nvar is = __webpack_require__(8);\nfunction addNS(data, children, sel) {\n    data.ns = 'http://www.w3.org/2000/svg';\n    if (sel !== 'foreignObject' && children !== undefined) {\n        for (var i = 0; i < children.length; ++i) {\n            var childData = children[i].data;\n            if (childData !== undefined) {\n                addNS(childData, children[i].children, children[i].sel);\n            }\n        }\n    }\n}\nfunction h(sel, b, c) {\n    var data = {}, children, text, i;\n    if (c !== undefined) {\n        data = b;\n        if (is.array(c)) {\n            children = c;\n        }\n        else if (is.primitive(c)) {\n            text = c;\n        }\n        else if (c && c.sel) {\n            children = [c];\n        }\n    }\n    else if (b !== undefined) {\n        if (is.array(b)) {\n            children = b;\n        }\n        else if (is.primitive(b)) {\n            text = b;\n        }\n        else if (b && b.sel) {\n            children = [b];\n        }\n        else {\n            data = b;\n        }\n    }\n    if (children !== undefined) {\n        for (i = 0; i < children.length; ++i) {\n            if (is.primitive(children[i]))\n                children[i] = vnode_1.vnode(undefined, undefined, undefined, children[i], undefined);\n        }\n    }\n    if (sel[0] === 's' && sel[1] === 'v' && sel[2] === 'g' &&\n        (sel.length === 3 || sel[3] === '.' || sel[3] === '#')) {\n        addNS(data, children, sel);\n    }\n    return vnode_1.vnode(sel, data, children, text, undefined);\n}\nexports.h = h;\n;\nexports.default = h;\n//# sourceMappingURL=h.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20vaC5qcz8yZWVkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQsY0FBYyxtQkFBTyxDQUFDLENBQVM7QUFDL0IsU0FBUyxtQkFBTyxDQUFDLENBQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHFCQUFxQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixxQkFBcUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdm5vZGVfMSA9IHJlcXVpcmUoXCIuL3Zub2RlXCIpO1xudmFyIGlzID0gcmVxdWlyZShcIi4vaXNcIik7XG5mdW5jdGlvbiBhZGROUyhkYXRhLCBjaGlsZHJlbiwgc2VsKSB7XG4gICAgZGF0YS5ucyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG4gICAgaWYgKHNlbCAhPT0gJ2ZvcmVpZ25PYmplY3QnICYmIGNoaWxkcmVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGNoaWxkRGF0YSA9IGNoaWxkcmVuW2ldLmRhdGE7XG4gICAgICAgICAgICBpZiAoY2hpbGREYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBhZGROUyhjaGlsZERhdGEsIGNoaWxkcmVuW2ldLmNoaWxkcmVuLCBjaGlsZHJlbltpXS5zZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaChzZWwsIGIsIGMpIHtcbiAgICB2YXIgZGF0YSA9IHt9LCBjaGlsZHJlbiwgdGV4dCwgaTtcbiAgICBpZiAoYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRhdGEgPSBiO1xuICAgICAgICBpZiAoaXMuYXJyYXkoYykpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpcy5wcmltaXRpdmUoYykpIHtcbiAgICAgICAgICAgIHRleHQgPSBjO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgJiYgYy5zZWwpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gW2NdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoaXMuYXJyYXkoYikpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gYjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpcy5wcmltaXRpdmUoYikpIHtcbiAgICAgICAgICAgIHRleHQgPSBiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGIgJiYgYi5zZWwpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gW2JdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGF0YSA9IGI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNoaWxkcmVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoaXMucHJpbWl0aXZlKGNoaWxkcmVuW2ldKSlcbiAgICAgICAgICAgICAgICBjaGlsZHJlbltpXSA9IHZub2RlXzEudm5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY2hpbGRyZW5baV0sIHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNlbFswXSA9PT0gJ3MnICYmIHNlbFsxXSA9PT0gJ3YnICYmIHNlbFsyXSA9PT0gJ2cnICYmXG4gICAgICAgIChzZWwubGVuZ3RoID09PSAzIHx8IHNlbFszXSA9PT0gJy4nIHx8IHNlbFszXSA9PT0gJyMnKSkge1xuICAgICAgICBhZGROUyhkYXRhLCBjaGlsZHJlbiwgc2VsKTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlXzEudm5vZGUoc2VsLCBkYXRhLCBjaGlsZHJlbiwgdGV4dCwgdW5kZWZpbmVkKTtcbn1cbmV4cG9ydHMuaCA9IGg7XG47XG5leHBvcnRzLmRlZmF1bHQgPSBoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aC5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nfunction vnode(sel, data, children, text, elm) {\n    var key = data === undefined ? undefined : data.key;\n    return { sel: sel, data: data, children: children,\n        text: text, elm: elm, key: key };\n}\nexports.vnode = vnode;\nexports.default = vnode;\n//# sourceMappingURL=vnode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20vdm5vZGUuanM/ODFhYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiB2bm9kZShzZWwsIGRhdGEsIGNoaWxkcmVuLCB0ZXh0LCBlbG0pIHtcbiAgICB2YXIga2V5ID0gZGF0YSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogZGF0YS5rZXk7XG4gICAgcmV0dXJuIHsgc2VsOiBzZWwsIGRhdGE6IGRhdGEsIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgICAgdGV4dDogdGV4dCwgZWxtOiBlbG0sIGtleToga2V5IH07XG59XG5leHBvcnRzLnZub2RlID0gdm5vZGU7XG5leHBvcnRzLmRlZmF1bHQgPSB2bm9kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZub2RlLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.array = Array.isArray;\nfunction primitive(s) {\n    return typeof s === 'string' || typeof s === 'number';\n}\nexports.primitive = primitive;\n//# sourceMappingURL=is.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20vaXMuanM/NmIzNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIHByaW1pdGl2ZShzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLnByaW1pdGl2ZSA9IHByaW1pdGl2ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "3c7995ba1ebaeb8df6c62360cd2406d1.mp3";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYW1lbl9icmVhay5tcDM/ZTZjOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIzYzc5OTViYTFlYmFlYjhkZjZjNjIzNjBjZDI0MDZkMS5tcDNcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/snabbdom/es/vnode.js\nfunction vnode_vnode(sel, data, children, text, elm) {\n    var key = data === undefined ? undefined : data.key;\n    return { sel: sel, data: data, children: children,\n        text: text, elm: elm, key: key };\n}\n/* harmony default export */ var es_vnode = (vnode_vnode);\n//# sourceMappingURL=vnode.js.map\n// CONCATENATED MODULE: ./node_modules/snabbdom/es/is.js\nvar array = Array.isArray;\nfunction primitive(s) {\n    return typeof s === 'string' || typeof s === 'number';\n}\n//# sourceMappingURL=is.js.map\n// CONCATENATED MODULE: ./node_modules/snabbdom/es/htmldomapi.js\nfunction createElement(tagName) {\n    return document.createElement(tagName);\n}\nfunction createElementNS(namespaceURI, qualifiedName) {\n    return document.createElementNS(namespaceURI, qualifiedName);\n}\nfunction createTextNode(text) {\n    return document.createTextNode(text);\n}\nfunction createComment(text) {\n    return document.createComment(text);\n}\nfunction insertBefore(parentNode, newNode, referenceNode) {\n    parentNode.insertBefore(newNode, referenceNode);\n}\nfunction removeChild(node, child) {\n    node.removeChild(child);\n}\nfunction appendChild(node, child) {\n    node.appendChild(child);\n}\nfunction parentNode(node) {\n    return node.parentNode;\n}\nfunction nextSibling(node) {\n    return node.nextSibling;\n}\nfunction tagName(elm) {\n    return elm.tagName;\n}\nfunction setTextContent(node, text) {\n    node.textContent = text;\n}\nfunction getTextContent(node) {\n    return node.textContent;\n}\nfunction isElement(node) {\n    return node.nodeType === 1;\n}\nfunction isText(node) {\n    return node.nodeType === 3;\n}\nfunction isComment(node) {\n    return node.nodeType === 8;\n}\nvar htmlDomApi = {\n    createElement: createElement,\n    createElementNS: createElementNS,\n    createTextNode: createTextNode,\n    createComment: createComment,\n    insertBefore: insertBefore,\n    removeChild: removeChild,\n    appendChild: appendChild,\n    parentNode: parentNode,\n    nextSibling: nextSibling,\n    tagName: tagName,\n    setTextContent: setTextContent,\n    getTextContent: getTextContent,\n    isElement: isElement,\n    isText: isText,\n    isComment: isComment,\n};\n/* harmony default export */ var htmldomapi = (htmlDomApi);\n//# sourceMappingURL=htmldomapi.js.map\n// CONCATENATED MODULE: ./node_modules/snabbdom/es/h.js\n\n\nfunction addNS(data, children, sel) {\n    data.ns = 'http://www.w3.org/2000/svg';\n    if (sel !== 'foreignObject' && children !== undefined) {\n        for (var i = 0; i < children.length; ++i) {\n            var childData = children[i].data;\n            if (childData !== undefined) {\n                addNS(childData, children[i].children, children[i].sel);\n            }\n        }\n    }\n}\nfunction h(sel, b, c) {\n    var data = {}, children, text, i;\n    if (c !== undefined) {\n        data = b;\n        if (array(c)) {\n            children = c;\n        }\n        else if (primitive(c)) {\n            text = c;\n        }\n        else if (c && c.sel) {\n            children = [c];\n        }\n    }\n    else if (b !== undefined) {\n        if (array(b)) {\n            children = b;\n        }\n        else if (primitive(b)) {\n            text = b;\n        }\n        else if (b && b.sel) {\n            children = [b];\n        }\n        else {\n            data = b;\n        }\n    }\n    if (children !== undefined) {\n        for (i = 0; i < children.length; ++i) {\n            if (primitive(children[i]))\n                children[i] = vnode_vnode(undefined, undefined, undefined, children[i], undefined);\n        }\n    }\n    if (sel[0] === 's' && sel[1] === 'v' && sel[2] === 'g' &&\n        (sel.length === 3 || sel[3] === '.' || sel[3] === '#')) {\n        addNS(data, children, sel);\n    }\n    return vnode_vnode(sel, data, children, text, undefined);\n}\n;\n/* harmony default export */ var es_h = (h);\n//# sourceMappingURL=h.js.map\n// CONCATENATED MODULE: ./node_modules/snabbdom/es/thunk.js\n\nfunction copyToThunk(vnode, thunk) {\n    thunk.elm = vnode.elm;\n    vnode.data.fn = thunk.data.fn;\n    vnode.data.args = thunk.data.args;\n    thunk.data = vnode.data;\n    thunk.children = vnode.children;\n    thunk.text = vnode.text;\n    thunk.elm = vnode.elm;\n}\nfunction init(thunk) {\n    var cur = thunk.data;\n    var vnode = cur.fn.apply(undefined, cur.args);\n    copyToThunk(vnode, thunk);\n}\nfunction prepatch(oldVnode, thunk) {\n    var i, old = oldVnode.data, cur = thunk.data;\n    var oldArgs = old.args, args = cur.args;\n    if (old.fn !== cur.fn || oldArgs.length !== args.length) {\n        copyToThunk(cur.fn.apply(undefined, args), thunk);\n        return;\n    }\n    for (i = 0; i < args.length; ++i) {\n        if (oldArgs[i] !== args[i]) {\n            copyToThunk(cur.fn.apply(undefined, args), thunk);\n            return;\n        }\n    }\n    copyToThunk(oldVnode, thunk);\n}\nvar thunk_thunk = function thunk(sel, key, fn, args) {\n    if (args === undefined) {\n        args = fn;\n        fn = key;\n        key = undefined;\n    }\n    return h(sel, {\n        key: key,\n        hook: { init: init, prepatch: prepatch },\n        fn: fn,\n        args: args\n    });\n};\n/* harmony default export */ var es_thunk = (thunk_thunk);\n//# sourceMappingURL=thunk.js.map\n// CONCATENATED MODULE: ./node_modules/snabbdom/es/snabbdom.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"init\", function() { return snabbdom_init; });\n/* concated harmony reexport h */__webpack_require__.d(__webpack_exports__, \"h\", function() { return h; });\n/* concated harmony reexport thunk */__webpack_require__.d(__webpack_exports__, \"thunk\", function() { return thunk_thunk; });\n\n\n\nfunction isUndef(s) { return s === undefined; }\nfunction isDef(s) { return s !== undefined; }\nvar emptyNode = es_vnode('', {}, [], undefined, undefined);\nfunction sameVnode(vnode1, vnode2) {\n    return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;\n}\nfunction isVnode(vnode) {\n    return vnode.sel !== undefined;\n}\nfunction createKeyToOldIdx(children, beginIdx, endIdx) {\n    var i, map = {}, key, ch;\n    for (i = beginIdx; i <= endIdx; ++i) {\n        ch = children[i];\n        if (ch != null) {\n            key = ch.key;\n            if (key !== undefined)\n                map[key] = i;\n        }\n    }\n    return map;\n}\nvar hooks = ['create', 'update', 'remove', 'destroy', 'pre', 'post'];\n\n\nfunction snabbdom_init(modules, domApi) {\n    var i, j, cbs = {};\n    var api = domApi !== undefined ? domApi : htmldomapi;\n    for (i = 0; i < hooks.length; ++i) {\n        cbs[hooks[i]] = [];\n        for (j = 0; j < modules.length; ++j) {\n            var hook = modules[j][hooks[i]];\n            if (hook !== undefined) {\n                cbs[hooks[i]].push(hook);\n            }\n        }\n    }\n    function emptyNodeAt(elm) {\n        var id = elm.id ? '#' + elm.id : '';\n        var c = elm.className ? '.' + elm.className.split(' ').join('.') : '';\n        return es_vnode(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);\n    }\n    function createRmCb(childElm, listeners) {\n        return function rmCb() {\n            if (--listeners === 0) {\n                var parent_1 = api.parentNode(childElm);\n                api.removeChild(parent_1, childElm);\n            }\n        };\n    }\n    function createElm(vnode, insertedVnodeQueue) {\n        var i, data = vnode.data;\n        if (data !== undefined) {\n            if (isDef(i = data.hook) && isDef(i = i.init)) {\n                i(vnode);\n                data = vnode.data;\n            }\n        }\n        var children = vnode.children, sel = vnode.sel;\n        if (sel === '!') {\n            if (isUndef(vnode.text)) {\n                vnode.text = '';\n            }\n            vnode.elm = api.createComment(vnode.text);\n        }\n        else if (sel !== undefined) {\n            // Parse selector\n            var hashIdx = sel.indexOf('#');\n            var dotIdx = sel.indexOf('.', hashIdx);\n            var hash = hashIdx > 0 ? hashIdx : sel.length;\n            var dot = dotIdx > 0 ? dotIdx : sel.length;\n            var tag = hashIdx !== -1 || dotIdx !== -1 ? sel.slice(0, Math.min(hash, dot)) : sel;\n            var elm = vnode.elm = isDef(data) && isDef(i = data.ns) ? api.createElementNS(i, tag)\n                : api.createElement(tag);\n            if (hash < dot)\n                elm.setAttribute('id', sel.slice(hash + 1, dot));\n            if (dotIdx > 0)\n                elm.setAttribute('class', sel.slice(dot + 1).replace(/\\./g, ' '));\n            for (i = 0; i < cbs.create.length; ++i)\n                cbs.create[i](emptyNode, vnode);\n            if (array(children)) {\n                for (i = 0; i < children.length; ++i) {\n                    var ch = children[i];\n                    if (ch != null) {\n                        api.appendChild(elm, createElm(ch, insertedVnodeQueue));\n                    }\n                }\n            }\n            else if (primitive(vnode.text)) {\n                api.appendChild(elm, api.createTextNode(vnode.text));\n            }\n            i = vnode.data.hook; // Reuse variable\n            if (isDef(i)) {\n                if (i.create)\n                    i.create(emptyNode, vnode);\n                if (i.insert)\n                    insertedVnodeQueue.push(vnode);\n            }\n        }\n        else {\n            vnode.elm = api.createTextNode(vnode.text);\n        }\n        return vnode.elm;\n    }\n    function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n        for (; startIdx <= endIdx; ++startIdx) {\n            var ch = vnodes[startIdx];\n            if (ch != null) {\n                api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);\n            }\n        }\n    }\n    function invokeDestroyHook(vnode) {\n        var i, j, data = vnode.data;\n        if (data !== undefined) {\n            if (isDef(i = data.hook) && isDef(i = i.destroy))\n                i(vnode);\n            for (i = 0; i < cbs.destroy.length; ++i)\n                cbs.destroy[i](vnode);\n            if (vnode.children !== undefined) {\n                for (j = 0; j < vnode.children.length; ++j) {\n                    i = vnode.children[j];\n                    if (i != null && typeof i !== \"string\") {\n                        invokeDestroyHook(i);\n                    }\n                }\n            }\n        }\n    }\n    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {\n        for (; startIdx <= endIdx; ++startIdx) {\n            var i_1 = void 0, listeners = void 0, rm = void 0, ch = vnodes[startIdx];\n            if (ch != null) {\n                if (isDef(ch.sel)) {\n                    invokeDestroyHook(ch);\n                    listeners = cbs.remove.length + 1;\n                    rm = createRmCb(ch.elm, listeners);\n                    for (i_1 = 0; i_1 < cbs.remove.length; ++i_1)\n                        cbs.remove[i_1](ch, rm);\n                    if (isDef(i_1 = ch.data) && isDef(i_1 = i_1.hook) && isDef(i_1 = i_1.remove)) {\n                        i_1(ch, rm);\n                    }\n                    else {\n                        rm();\n                    }\n                }\n                else {\n                    api.removeChild(parentElm, ch.elm);\n                }\n            }\n        }\n    }\n    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {\n        var oldStartIdx = 0, newStartIdx = 0;\n        var oldEndIdx = oldCh.length - 1;\n        var oldStartVnode = oldCh[0];\n        var oldEndVnode = oldCh[oldEndIdx];\n        var newEndIdx = newCh.length - 1;\n        var newStartVnode = newCh[0];\n        var newEndVnode = newCh[newEndIdx];\n        var oldKeyToIdx;\n        var idxInOld;\n        var elmToMove;\n        var before;\n        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n            if (oldStartVnode == null) {\n                oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n            }\n            else if (oldEndVnode == null) {\n                oldEndVnode = oldCh[--oldEndIdx];\n            }\n            else if (newStartVnode == null) {\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else if (newEndVnode == null) {\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldStartVnode, newStartVnode)) {\n                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n                oldStartVnode = oldCh[++oldStartIdx];\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else if (sameVnode(oldEndVnode, newEndVnode)) {\n                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n                oldEndVnode = oldCh[--oldEndIdx];\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldStartVnode, newEndVnode)) {\n                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n                api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));\n                oldStartVnode = oldCh[++oldStartIdx];\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldEndVnode, newStartVnode)) {\n                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n                api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n                oldEndVnode = oldCh[--oldEndIdx];\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                if (oldKeyToIdx === undefined) {\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n                }\n                idxInOld = oldKeyToIdx[newStartVnode.key];\n                if (isUndef(idxInOld)) {\n                    api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                    newStartVnode = newCh[++newStartIdx];\n                }\n                else {\n                    elmToMove = oldCh[idxInOld];\n                    if (elmToMove.sel !== newStartVnode.sel) {\n                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                    }\n                    else {\n                        patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n                        oldCh[idxInOld] = undefined;\n                        api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);\n                    }\n                    newStartVnode = newCh[++newStartIdx];\n                }\n            }\n        }\n        if (oldStartIdx <= oldEndIdx || newStartIdx <= newEndIdx) {\n            if (oldStartIdx > oldEndIdx) {\n                before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;\n                addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n            }\n            else {\n                removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n            }\n        }\n    }\n    function patchVnode(oldVnode, vnode, insertedVnodeQueue) {\n        var i, hook;\n        if (isDef(i = vnode.data) && isDef(hook = i.hook) && isDef(i = hook.prepatch)) {\n            i(oldVnode, vnode);\n        }\n        var elm = vnode.elm = oldVnode.elm;\n        var oldCh = oldVnode.children;\n        var ch = vnode.children;\n        if (oldVnode === vnode)\n            return;\n        if (vnode.data !== undefined) {\n            for (i = 0; i < cbs.update.length; ++i)\n                cbs.update[i](oldVnode, vnode);\n            i = vnode.data.hook;\n            if (isDef(i) && isDef(i = i.update))\n                i(oldVnode, vnode);\n        }\n        if (isUndef(vnode.text)) {\n            if (isDef(oldCh) && isDef(ch)) {\n                if (oldCh !== ch)\n                    updateChildren(elm, oldCh, ch, insertedVnodeQueue);\n            }\n            else if (isDef(ch)) {\n                if (isDef(oldVnode.text))\n                    api.setTextContent(elm, '');\n                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n            }\n            else if (isDef(oldCh)) {\n                removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n            }\n            else if (isDef(oldVnode.text)) {\n                api.setTextContent(elm, '');\n            }\n        }\n        else if (oldVnode.text !== vnode.text) {\n            if (isDef(oldCh)) {\n                removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n            }\n            api.setTextContent(elm, vnode.text);\n        }\n        if (isDef(hook) && isDef(i = hook.postpatch)) {\n            i(oldVnode, vnode);\n        }\n    }\n    return function patch(oldVnode, vnode) {\n        var i, elm, parent;\n        var insertedVnodeQueue = [];\n        for (i = 0; i < cbs.pre.length; ++i)\n            cbs.pre[i]();\n        if (!isVnode(oldVnode)) {\n            oldVnode = emptyNodeAt(oldVnode);\n        }\n        if (sameVnode(oldVnode, vnode)) {\n            patchVnode(oldVnode, vnode, insertedVnodeQueue);\n        }\n        else {\n            elm = oldVnode.elm;\n            parent = api.parentNode(elm);\n            createElm(vnode, insertedVnodeQueue);\n            if (parent !== null) {\n                api.insertBefore(parent, vnode.elm, api.nextSibling(elm));\n                removeVnodes(parent, [oldVnode], 0, 0);\n            }\n        }\n        for (i = 0; i < insertedVnodeQueue.length; ++i) {\n            insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);\n        }\n        for (i = 0; i < cbs.post.length; ++i)\n            cbs.post[i]();\n        return vnode;\n    };\n}\n//# sourceMappingURL=snabbdom.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/riv.js\nvar riv = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./src/dom.js\nvar dom = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/programs.js\n // NOTE: Using require instead of import here makes the thing where we print program text work better.\n\nconst {\n  useVar,\n  useRequestUpdate,\n  useInitialize,\n  useAsyncEventEmitter,\n  useEventReceiver,\n  useDynamic,\n  useReducer,\n  useMachine\n} = __webpack_require__(0);\n\nconst {\n  renderDOMIntoSelector,\n  h\n} = __webpack_require__(1);\n\nconst amen_break_url = __webpack_require__(9);\n\nfunction showString(v) {\n  const elem = useVar(null);\n  useInitialize(() => {\n    elem.current = document.createElement('div');\n    elem.current.style.cssText = 'border: 1px solid red; color: black; font-size: 24px; padding: 5px; margin-top: 20px';\n    elem.current.textContent = '(undefined)';\n    document.body.appendChild(elem.current);\n    return () => {\n      // cleanup\n      document.body.removeChild(elem.current);\n    };\n  });\n  elem.current.textContent = 'showString: ' + (v === undefined ? '(undefined)' : v.toString());\n}\n\nfunction animationTime() {\n  const requestUpdate = useRequestUpdate();\n  const time = useVar();\n  const reqId = useVar();\n  useInitialize(() => {\n    const onFrame = t => {\n      time.current = 0.001 * t;\n      reqId.current = requestAnimationFrame(onFrame); // request another\n\n      requestUpdate();\n    };\n\n    time.current = 0.001 * performance.now();\n    reqId.current = requestAnimationFrame(onFrame);\n    return () => {\n      // cleanup\n      cancelAnimationFrame(reqId.current);\n    };\n  });\n  return time.current;\n}\n\nfunction animationFrameEvts() {\n  const requestUpdate = useRequestUpdate();\n  const reqId = useVar();\n  const [frameEvts, emitFrame] = useAsyncEventEmitter();\n  useInitialize(() => {\n    const onFrame = t => {\n      emitFrame();\n      reqId.current = requestAnimationFrame(onFrame); // request another\n\n      requestUpdate();\n    };\n\n    reqId.current = requestAnimationFrame(onFrame);\n    return () => {\n      // cleanup\n      cancelAnimationFrame(reqId.current);\n    };\n  });\n  return frameEvts;\n}\n\nfunction countEvents(evts) {\n  const count = useVar(0);\n  const event = useEventReceiver(evts);\n\n  if (event) {\n    count.current++;\n  }\n\n  return count.current;\n}\n\nfunction mouseClickEvts() {\n  const requestUpdate = useRequestUpdate();\n  const [clickEvt, emitClick] = useAsyncEventEmitter();\n  useInitialize(() => {\n    const onMouseDown = () => {\n      emitClick();\n      requestUpdate();\n    };\n\n    document.addEventListener('mousedown', onMouseDown);\n    return () => {\n      // cleanup\n      document.removeEventListener('mousedown', onMouseDown);\n    };\n  });\n  return clickEvt;\n}\n\nfunction mouseDown() {\n  const requestUpdate = useRequestUpdate();\n  const isDown = useVar(false); // we can't poll down-ness, so we assume it's initially not down\n\n  useInitialize(() => {\n    const onMouseDown = () => {\n      isDown.current = true;\n      requestUpdate();\n    };\n\n    const onMouseUp = () => {\n      isDown.current = false;\n      requestUpdate();\n    };\n\n    document.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    return () => {\n      // cleanup\n      document.removeEventListener('mousedown', onMouseDown);\n      document.removeEventListener('mouseup', onMouseUp);\n    };\n  });\n  return isDown.current;\n}\n\nfunction mousePosition() {\n  const requestUpdate = useRequestUpdate();\n  const position = useVar({\n    x: 0,\n    y: 0\n  }); // we can't poll position, so start it at origin\n\n  useInitialize(() => {\n    const onMouseMove = e => {\n      position.current = {\n        x: e.clientX || e.pageX,\n        y: e.clientY || e.pageY\n      };\n      requestUpdate();\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n    return () => {\n      // cleanup\n      document.removeEventListener('mousemove', onMouseMove);\n    };\n  });\n  return position.current;\n}\n\nfunction random(repickEvt) {\n  const val = useVar(Math.random());\n  const repick = useEventReceiver(repickEvt);\n\n  if (repick) {\n    val.current = Math.random();\n  }\n\n  return val.current;\n}\n\nfunction audioDriver(generator) {\n  const createGenerator = useDynamic(generator);\n  const generatorCtx = useVar();\n  const frameCount = useVar(0);\n  const sampleRate = useVar();\n  useInitialize(() => {\n    generatorCtx.current = createGenerator();\n    const BUFFER_SIZE = 1024;\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const scriptNode = audioContext.createScriptProcessor(BUFFER_SIZE, 0, 1); // 0 input channels, 1 output channel\n\n    scriptNode.onaudioprocess = e => {\n      const buffer = e.outputBuffer.getChannelData(0);\n\n      for (let i = 0; i < buffer.length; i++) {\n        buffer[i] = generatorCtx.current.update(frameCount.current / sampleRate.current, {\n          value: undefined\n        }, sampleRate.current);\n        frameCount.current++;\n      }\n    };\n\n    scriptNode.connect(audioContext.destination);\n    sampleRate.current = audioContext.sampleRate;\n    return () => {\n      scriptNode.disconnect();\n      audioContext.close();\n    };\n  });\n  /**\n   * Most of our generator updating will happen in the audio processing callback above.\n   * This update here is for when the audioDriver update is called, e.g. when an outer scope\n   * reference that the generator depends on has changed. So we must update the generator,\n   * but don't need its output amplitude.\n   */\n\n  generatorCtx.current.update(frameCount.current / sampleRate.current, undefined, sampleRate.current); // NOTE: we discard retval\n}\n\nfunction sampleUpon(toSample, uponEvt, initialValue) {\n  const held = useVar(initialValue);\n  const upon = useEventReceiver(uponEvt);\n\n  if (upon) {\n    held.current = toSample;\n  }\n\n  return held.current;\n}\n\nfunction everySecond() {\n  const requestUpdate = useRequestUpdate();\n  const [tickEvt, emitTick] = useAsyncEventEmitter();\n  useInitialize(() => {\n    const onInterval = () => {\n      emitTick();\n      requestUpdate();\n    };\n\n    const timerId = setInterval(onInterval, 1000);\n    return () => {\n      // cleanup\n      clearInterval(timerId);\n    };\n  });\n  return tickEvt;\n}\n/**\n * Until audio is loaded and decoded, a single-sample buffer of silence is returned.\n */\n\n\nfunction loadAudioAsArray(url) {\n  const requestUpdate = useRequestUpdate();\n  const pcm = useVar([0]); // until loaded, just return single sample of silence\n\n  useInitialize(() => {\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    let cleanedUp = false;\n    const request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n\n    request.onload = () => {\n      const audioData = request.response;\n      audioCtx.decodeAudioData(audioData, buffer => {\n        if (!cleanedUp) {\n          pcm.current = buffer.getChannelData(0);\n          requestUpdate();\n        }\n      });\n    };\n\n    request.send();\n    return () => {\n      // cleanup\n      request.abort(); // it's safe to always abort here. if already completed, it will be ignored\n      // decodeAudioData cannot be canceled. So to be correct, we must set a flag here to make sure\n      // that decoding is ignored\n\n      cleanedUp = true;\n    };\n  });\n  return pcm.current;\n}\n\nfunction consoleLog(v) {\n  console.log(v);\n}\n\nfunction integral(integrandFunc, time, initialValue = 0) {\n  const accum = useVar(initialValue);\n  const prevTime = useVar(time);\n  const integrand = integrandFunc(accum.current, prevTime.current);\n  accum.current += (time - prevTime.current) * integrand;\n  prevTime.current = time;\n  return accum.current;\n}\n\nfunction expFollow(targetValue, speedConstant, time, initialValue) {\n  return integral(currentValue => speedConstant * (targetValue - currentValue), time, initialValue);\n}\n\nfunction redCircle(position, radius = 25) {\n  const elem = useVar(null);\n  useInitialize(() => {\n    elem.current = document.createElement('div');\n    elem.current.style.cssText = 'position: absolute; border-radius: 50%; background: red; pointer-events: none; user-select: none';\n    document.body.appendChild(elem.current);\n    return () => {\n      // cleanup\n      document.body.removeChild(elem.current);\n    };\n  });\n  const p = position || {\n    x: 0,\n    y: 0\n  };\n\n  if (radius < 0) {\n    radius = 0;\n  }\n\n  const halfRadius = 0.5 * radius;\n  elem.current.style.left = p.x - halfRadius + 'px';\n  elem.current.style.top = p.y - halfRadius + 'px';\n  elem.current.style.width = radius + 'px';\n  elem.current.style.height = radius + 'px';\n}\n\nfunction followAtSpeed2d(target, speed, time, initial) {\n  const pos = useVar(initial);\n  const prevTime = useVar(time);\n  const dt = time - prevTime.current;\n  const delta = {\n    x: target.x - pos.current.x,\n    y: target.y - pos.current.y\n  };\n  const dist = Math.sqrt(delta.x * delta.x + delta.y * delta.y);\n\n  if (speed * dt >= dist) {\n    // Jump to target position\n    pos.current = target;\n  } else {\n    // NOTE: We must not mutate pos.current, since we return that\n    pos.current = {\n      x: pos.current.x + dt * speed * delta.x / dist,\n      y: pos.current.y + dt * speed * delta.y / dist\n    };\n  }\n\n  prevTime.current = time;\n  return pos.current;\n}\n/**\n * Note that this _will_ fire in first call if condition starts truthy\n */\n\n\nfunction eventWhen(condition, valueToEmit) {\n  const prevCondition = useVar(false);\n  const bcond = !!condition;\n  const retval = bcond && !prevCondition.current ? {\n    value: valueToEmit\n  } : undefined;\n  prevCondition.current = bcond;\n  return retval;\n}\n/**\n * Note that seconds argument is only read initially. But valueToEmit is re-read on changes\n */\n\n\nfunction eventAfter(seconds, valueToEmit) {\n  const [evt, emit] = useAsyncEventEmitter();\n  const value = useVar(valueToEmit);\n  value.current = valueToEmit;\n  useInitialize(() => {\n    const timerId = setTimeout(() => {\n      emit(value.current);\n    }, 1000 * seconds);\n    return () => {\n      clearTimeout(timerId);\n    };\n  });\n  return evt;\n}\n\nfunction makeAsyncCallback() {\n  const [evt, emit] = useAsyncEventEmitter();\n  const requestUpdate = useRequestUpdate();\n\n  const callback = (...args) => {\n    emit(args);\n    requestUpdate();\n  };\n\n  return [callback, evt];\n}\n\n/* harmony default export */ var programs = ([{\n  name: 'do nothing',\n  main: () => {}\n}, {\n  name: 'animation time',\n  main: () => {\n    showString(animationTime().toFixed(3));\n  }\n}, {\n  name: 'count clicks',\n  main: () => {\n    showString(countEvents(mouseClickEvts()));\n  }\n}, {\n  name: 'is mouse button down',\n  main: () => {\n    showString(mouseDown());\n  }\n}, {\n  name: 'random number, click to repick',\n  main: () => {\n    showString(random(mouseClickEvts()));\n  }\n}, {\n  name: 'audio noise when mouse is down',\n  main: () => {\n    const md = mouseDown();\n    audioDriver((audioTime, advanceFrameEvt) => {\n      const noise = random(advanceFrameEvt) - 0.5;\n      return md ? noise : 0;\n    });\n  }\n}, {\n  name: 'decaying noise upon click',\n  main: () => {\n    const clickEvt = mouseClickEvts();\n    audioDriver((audioTime, advanceFrameEvt) => {\n      const noise = random(advanceFrameEvt) - 0.5;\n      const lastClickTime = sampleUpon(audioTime, clickEvt, -Infinity);\n      const decayingGain = Math.exp(5 * (lastClickTime - audioTime));\n      return decayingGain * noise;\n    });\n  }\n}, {\n  name: 'resetting frame counter, click to reset',\n  main: () => {\n    const frameEvts = animationFrameEvts();\n    const clickEvt = mouseClickEvts();\n    const click = useEventReceiver(clickEvt);\n    const createCounter = useDynamic(countEvents);\n    const activeCounter = useVar();\n\n    if (click) {\n      if (activeCounter.current) {\n        activeCounter.current.terminate();\n      }\n\n      activeCounter.current = createCounter();\n    }\n\n    if (!activeCounter.current) {\n      activeCounter.current = createCounter();\n    }\n\n    const displayedCount = activeCounter.current.update(frameEvts);\n    showString(displayedCount);\n  }\n}, {\n  name: 'dynamic array of async clocks, click to add',\n  main: () => {\n    const clickEvt = mouseClickEvts();\n    const click = useEventReceiver(clickEvt);\n    const createClock = useDynamic(() => countEvents(everySecond()));\n    const clockArray = useVar([]);\n\n    if (click) {\n      clockArray.current.push(createClock());\n    }\n\n    const nums = clockArray.current.map(clock => clock.update());\n    showString(nums.join(' '));\n  }\n}, {\n  name: 'record player spin up/down, hold mouse down and release',\n  main: () => {\n    const pcm = loadAudioAsArray(amen_break_url);\n    showString(pcm.length > 1 ? 'loaded audio' : 'loading audio...');\n    audioDriver((audioTime, advanceFrameEvt, sampleRate) => {\n      const targetSpeed = mouseDown() ? sampleRate : 0;\n      const speed = expFollow(targetSpeed, 3, audioTime, 0);\n      const pos = Math.floor(integral(() => speed, audioTime));\n      return pcm[pos % pcm.length]; // modulo so as to loop\n    });\n  }\n}, {\n  name: 'circle follows mouse',\n  main: () => {\n    redCircle(mousePosition());\n  }\n}, {\n  name: 'circle follows mouse at limited speed',\n  main: () => {\n    const time = animationTime();\n    const mpos = mousePosition();\n    redCircle(followAtSpeed2d(mpos, 300, time, mpos));\n  }\n}, {\n  name: 'circle moves halfway to mouse with each click',\n  main: () => {\n    const midpoint = (a, b) => ({\n      x: 0.5 * (a.x + b.x),\n      y: 0.5 * (a.y + b.y)\n    });\n\n    const mpos = mousePosition();\n    const clickEvt = mouseClickEvts();\n    const cpos = useReducer(clickEvt, (_, prevState) => midpoint(prevState, mpos), {\n      x: 0,\n      y: 0\n    });\n    redCircle(cpos);\n  }\n}, {\n  name: 'roaming circle (state machine)',\n  main: () => {\n    const time = animationTime();\n    const position = useMachine({\n      moving: initialPosition => {\n        const targetPosition = {\n          x: 500 * random(),\n          y: 500 * random()\n        };\n        const position = followAtSpeed2d(targetPosition, 300, time, initialPosition);\n        const arrived = position.x === targetPosition.x && position.y === targetPosition.y;\n        return [position, eventWhen(arrived, ['resting', position])];\n      },\n      resting: initialPosition => {\n        return [initialPosition, eventAfter(random(), ['moving', initialPosition])];\n      }\n    }, ['moving', {\n      x: 0,\n      y: 0\n    }]);\n    redCircle(position);\n  }\n},\n/* ALTERNATE JSX VERSION FOR BELOW\n  const vnode = (\n    <div>\n      <span>{label} {value}{unit}</span>\n      <input type=\"range\" min={min} max={max} value={value} on-input={inputCallback} />\n    </div>\n  );\n*/\n{\n  name: 'DOM',\n  main: () => {\n    const LabeledSlider = (label, unit, min, initialValue, max) => {\n      const [inputCallback, inputEvt] = makeAsyncCallback();\n      const value = useReducer(inputEvt, ([e], prevState) => e.target.value, initialValue);\n      const vnode = h('div', [h('span', label + ' ' + value + unit), h('input', {\n        attrs: {\n          type: 'range',\n          min,\n          max,\n          value\n        },\n        on: {\n          input: inputCallback\n        }\n      })]);\n      return [vnode, value];\n    };\n\n    const [weightNode, weight] = LabeledSlider('Weight', 'kg', 40, 70, 150);\n    const [heightNode, height] = LabeledSlider('Height', 'cm', 140, 170, 210);\n    const heightMeters = 0.01 * height;\n    const bmi = Math.round(weight / (heightMeters * heightMeters));\n    const uiNode = h('div', [weightNode, heightNode, h('h2', 'BMI is ' + bmi)]);\n    renderDOMIntoSelector(uiNode, '#output');\n  }\n}]);\n// CONCATENATED MODULE: ./src/index.js\n\n\nconst programListElem = document.getElementById('program-list');\nconst programSourceElem = document.getElementById('program-source');\nlet currentContext; // NOTE: This is a hack but works for now\n\nconst fixIndent = code => {\n  return code.split('\\n').map((line, idx) => idx === 0 ? line : line.substr(2)).join('\\n');\n};\n\nconst startProgram = program => {\n  if (currentContext) {\n    currentContext.terminate();\n    currentContext = undefined;\n  }\n\n  programSourceElem.textContent = fixIndent(program.main.toString()); // hacky but works for now\n\n  currentContext = Object(riv[\"createNoInOutExecutionContext\"])(program.main);\n  currentContext.update(); // do initial update. any further updates will be async\n};\n\nfor (const prog of programs) {\n  const anchorElem = document.createElement('a');\n  anchorElem.textContent = prog.name;\n  anchorElem.setAttribute('href', '#');\n\n  (() => {\n    anchorElem.addEventListener('click', e => {\n      e.preventDefault();\n      setTimeout(() => {\n        // start program with delay so it doesn't get this click event\n        startProgram(prog);\n      }, 0);\n    });\n  })();\n\n  const itemElem = document.createElement('li');\n  itemElem.appendChild(anchorElem);\n  programListElem.appendChild(itemElem);\n}\n\nstartProgram(programs[0]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcHJvZ3JhbXMuanM/NWMyYSIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6WyJ1c2VWYXIiLCJ1c2VSZXF1ZXN0VXBkYXRlIiwidXNlSW5pdGlhbGl6ZSIsInVzZUFzeW5jRXZlbnRFbWl0dGVyIiwidXNlRXZlbnRSZWNlaXZlciIsInVzZUR5bmFtaWMiLCJ1c2VSZWR1Y2VyIiwidXNlTWFjaGluZSIsInJlcXVpcmUiLCJyZW5kZXJET01JbnRvU2VsZWN0b3IiLCJoIiwiYW1lbl9icmVha191cmwiLCJzaG93U3RyaW5nIiwidiIsImVsZW0iLCJjdXJyZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJjc3NUZXh0IiwidGV4dENvbnRlbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVDaGlsZCIsInVuZGVmaW5lZCIsInRvU3RyaW5nIiwiYW5pbWF0aW9uVGltZSIsInJlcXVlc3RVcGRhdGUiLCJ0aW1lIiwicmVxSWQiLCJvbkZyYW1lIiwidCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBlcmZvcm1hbmNlIiwibm93IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJhbmltYXRpb25GcmFtZUV2dHMiLCJmcmFtZUV2dHMiLCJlbWl0RnJhbWUiLCJjb3VudEV2ZW50cyIsImV2dHMiLCJjb3VudCIsImV2ZW50IiwibW91c2VDbGlja0V2dHMiLCJjbGlja0V2dCIsImVtaXRDbGljayIsIm9uTW91c2VEb3duIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJtb3VzZURvd24iLCJpc0Rvd24iLCJvbk1vdXNlVXAiLCJtb3VzZVBvc2l0aW9uIiwicG9zaXRpb24iLCJ4IiwieSIsIm9uTW91c2VNb3ZlIiwiZSIsImNsaWVudFgiLCJwYWdlWCIsImNsaWVudFkiLCJwYWdlWSIsInJhbmRvbSIsInJlcGlja0V2dCIsInZhbCIsIk1hdGgiLCJyZXBpY2siLCJhdWRpb0RyaXZlciIsImdlbmVyYXRvciIsImNyZWF0ZUdlbmVyYXRvciIsImdlbmVyYXRvckN0eCIsImZyYW1lQ291bnQiLCJzYW1wbGVSYXRlIiwiQlVGRkVSX1NJWkUiLCJhdWRpb0NvbnRleHQiLCJ3aW5kb3ciLCJBdWRpb0NvbnRleHQiLCJ3ZWJraXRBdWRpb0NvbnRleHQiLCJzY3JpcHROb2RlIiwiY3JlYXRlU2NyaXB0UHJvY2Vzc29yIiwib25hdWRpb3Byb2Nlc3MiLCJidWZmZXIiLCJvdXRwdXRCdWZmZXIiLCJnZXRDaGFubmVsRGF0YSIsImkiLCJsZW5ndGgiLCJ1cGRhdGUiLCJ2YWx1ZSIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsImRpc2Nvbm5lY3QiLCJjbG9zZSIsInNhbXBsZVVwb24iLCJ0b1NhbXBsZSIsInVwb25FdnQiLCJpbml0aWFsVmFsdWUiLCJoZWxkIiwidXBvbiIsImV2ZXJ5U2Vjb25kIiwidGlja0V2dCIsImVtaXRUaWNrIiwib25JbnRlcnZhbCIsInRpbWVySWQiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJsb2FkQXVkaW9Bc0FycmF5IiwidXJsIiwicGNtIiwiYXVkaW9DdHgiLCJjbGVhbmVkVXAiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwib25sb2FkIiwiYXVkaW9EYXRhIiwicmVzcG9uc2UiLCJkZWNvZGVBdWRpb0RhdGEiLCJzZW5kIiwiYWJvcnQiLCJjb25zb2xlTG9nIiwiY29uc29sZSIsImxvZyIsImludGVncmFsIiwiaW50ZWdyYW5kRnVuYyIsImFjY3VtIiwicHJldlRpbWUiLCJpbnRlZ3JhbmQiLCJleHBGb2xsb3ciLCJ0YXJnZXRWYWx1ZSIsInNwZWVkQ29uc3RhbnQiLCJjdXJyZW50VmFsdWUiLCJyZWRDaXJjbGUiLCJyYWRpdXMiLCJwIiwiaGFsZlJhZGl1cyIsImxlZnQiLCJ0b3AiLCJ3aWR0aCIsImhlaWdodCIsImZvbGxvd0F0U3BlZWQyZCIsInRhcmdldCIsInNwZWVkIiwiaW5pdGlhbCIsInBvcyIsImR0IiwiZGVsdGEiLCJkaXN0Iiwic3FydCIsImV2ZW50V2hlbiIsImNvbmRpdGlvbiIsInZhbHVlVG9FbWl0IiwicHJldkNvbmRpdGlvbiIsImJjb25kIiwicmV0dmFsIiwiZXZlbnRBZnRlciIsInNlY29uZHMiLCJldnQiLCJlbWl0Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsIm1ha2VBc3luY0NhbGxiYWNrIiwiY2FsbGJhY2siLCJhcmdzIiwibmFtZSIsIm1haW4iLCJ0b0ZpeGVkIiwibWQiLCJhdWRpb1RpbWUiLCJhZHZhbmNlRnJhbWVFdnQiLCJub2lzZSIsImxhc3RDbGlja1RpbWUiLCJJbmZpbml0eSIsImRlY2F5aW5nR2FpbiIsImV4cCIsImNsaWNrIiwiY3JlYXRlQ291bnRlciIsImFjdGl2ZUNvdW50ZXIiLCJ0ZXJtaW5hdGUiLCJkaXNwbGF5ZWRDb3VudCIsImNyZWF0ZUNsb2NrIiwiY2xvY2tBcnJheSIsInB1c2giLCJudW1zIiwibWFwIiwiY2xvY2siLCJqb2luIiwidGFyZ2V0U3BlZWQiLCJmbG9vciIsIm1wb3MiLCJtaWRwb2ludCIsImEiLCJiIiwiY3BvcyIsIl8iLCJwcmV2U3RhdGUiLCJtb3ZpbmciLCJpbml0aWFsUG9zaXRpb24iLCJ0YXJnZXRQb3NpdGlvbiIsImFycml2ZWQiLCJyZXN0aW5nIiwiTGFiZWxlZFNsaWRlciIsImxhYmVsIiwidW5pdCIsIm1pbiIsIm1heCIsImlucHV0Q2FsbGJhY2siLCJpbnB1dEV2dCIsInZub2RlIiwiYXR0cnMiLCJ0eXBlIiwib24iLCJpbnB1dCIsIndlaWdodE5vZGUiLCJ3ZWlnaHQiLCJoZWlnaHROb2RlIiwiaGVpZ2h0TWV0ZXJzIiwiYm1pIiwicm91bmQiLCJ1aU5vZGUiLCJwcm9ncmFtTGlzdEVsZW0iLCJnZXRFbGVtZW50QnlJZCIsInByb2dyYW1Tb3VyY2VFbGVtIiwiY3VycmVudENvbnRleHQiLCJmaXhJbmRlbnQiLCJjb2RlIiwic3BsaXQiLCJsaW5lIiwiaWR4Iiwic3Vic3RyIiwic3RhcnRQcm9ncmFtIiwicHJvZ3JhbSIsImNyZWF0ZU5vSW5PdXRFeGVjdXRpb25Db250ZXh0IiwicHJvZyIsInByb2dyYW1zIiwiYW5jaG9yRWxlbSIsInNldEF0dHJpYnV0ZSIsInByZXZlbnREZWZhdWx0IiwiaXRlbUVsZW0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztDQUNBOztBQUNBLE1BQU07QUFBRUEsUUFBRjtBQUFVQyxrQkFBVjtBQUE0QkMsZUFBNUI7QUFBMkNDLHNCQUEzQztBQUFpRUMsa0JBQWpFO0FBQW1GQyxZQUFuRjtBQUErRkMsWUFBL0Y7QUFBMkdDO0FBQTNHLElBQTBIQyxtQkFBTyxDQUFDLENBQUQsQ0FBdkk7O0FBQ0EsTUFBTTtBQUFFQyx1QkFBRjtBQUF5QkM7QUFBekIsSUFBK0JGLG1CQUFPLENBQUMsQ0FBRCxDQUE1Qzs7QUFDQSxNQUFNRyxjQUFjLEdBQUdILG1CQUFPLENBQUMsQ0FBRCxDQUE5Qjs7QUFHQSxTQUFTSSxVQUFULENBQW9CQyxDQUFwQixFQUF1QjtBQUNyQixRQUFNQyxJQUFJLEdBQUdkLE1BQU0sQ0FBQyxJQUFELENBQW5CO0FBRUFFLGVBQWEsQ0FBQyxNQUFNO0FBQ2xCWSxRQUFJLENBQUNDLE9BQUwsR0FBZUMsUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQWY7QUFDQUgsUUFBSSxDQUFDQyxPQUFMLENBQWFHLEtBQWIsQ0FBbUJDLE9BQW5CLEdBQTZCLHNGQUE3QjtBQUNBTCxRQUFJLENBQUNDLE9BQUwsQ0FBYUssV0FBYixHQUEyQixhQUEzQjtBQUNBSixZQUFRLENBQUNLLElBQVQsQ0FBY0MsV0FBZCxDQUEwQlIsSUFBSSxDQUFDQyxPQUEvQjtBQUVBLFdBQU8sTUFBTTtBQUFFO0FBQ2JDLGNBQVEsQ0FBQ0ssSUFBVCxDQUFjRSxXQUFkLENBQTBCVCxJQUFJLENBQUNDLE9BQS9CO0FBQ0QsS0FGRDtBQUdELEdBVFksQ0FBYjtBQVdBRCxNQUFJLENBQUNDLE9BQUwsQ0FBYUssV0FBYixHQUEyQixrQkFBbUJQLENBQUMsS0FBS1csU0FBUCxHQUFv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QXFCcU4sVUFBckI7QUFFQWYsaUJBQWUsQ0FBQ3RNLFdBQWhCLENBQTRCd04sUUFBNUI7QUFDRDs7QUFFRFIsWUFBWSxDQUFDSSxRQUFRLENBQUMsQ0FBRCxDQUFULENBQVoiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZG9tIGZyb20gJy4vZG9tJztcbi8vIE5PVEU6IFVzaW5nIHJlcXVpcmUgaW5zdGVhZCBvZiBpbXBvcnQgaGVyZSBtYWtlcyB0aGUgdGhpbmcgd2hlcmUgd2UgcHJpbnQgcHJvZ3JhbSB0ZXh0IHdvcmsgYmV0dGVyLlxuY29uc3QgeyB1c2VWYXIsIHVzZVJlcXVlc3RVcGRhdGUsIHVzZUluaXRpYWxpemUsIHVzZUFzeW5jRXZlbnRFbWl0dGVyLCB1c2VFdmVudFJlY2VpdmVyLCB1c2VEeW5hbWljLCB1c2VSZWR1Y2VyLCB1c2VNYWNoaW5lIH0gPSByZXF1aXJlKCcuL3JpdicpO1xuY29uc3QgeyByZW5kZXJET01JbnRvU2VsZWN0b3IsIGggfSA9IHJlcXVpcmUoJy4vZG9tJyk7XG5jb25zdCBhbWVuX2JyZWFrX3VybCA9IHJlcXVpcmUoJy4vYW1lbl9icmVhay5tcDMnKTtcblxuXG5mdW5jdGlvbiBzaG93U3RyaW5nKHYpIHtcbiAgY29uc3QgZWxlbSA9IHVzZVZhcihudWxsKTtcblxuICB1c2VJbml0aWFsaXplKCgpID0+IHtcbiAgICBlbGVtLmN1cnJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtLmN1cnJlbnQuc3R5bGUuY3NzVGV4dCA9ICdib3JkZXI6IDFweCBzb2xpZCByZWQ7IGNvbG9yOiBibGFjazsgZm9udC1zaXplOiAyNHB4OyBwYWRkaW5nOiA1cHg7IG1hcmdpbi10b3A6IDIwcHgnO1xuICAgIGVsZW0uY3VycmVudC50ZXh0Q29udGVudCA9ICcodW5kZWZpbmVkKSc7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtLmN1cnJlbnQpO1xuXG4gICAgcmV0dXJuICgpID0+IHsgLy8gY2xlYW51cFxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGVtLmN1cnJlbnQpO1xuICAgIH1cbiAgfSlcblxuICBlbGVtLmN1cnJlbnQudGV4dENvbnRlbnQgPSAnc2hvd1N0cmluZzogJyArICgodiA9PT0gdW5kZWZpbmVkKSA/ICcodW5kZWZpbmVkKScgOiB2LnRvU3RyaW5nKCkpO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25UaW1lKCkge1xuICBjb25zdCByZXF1ZXN0VXBkYXRlID0gdXNlUmVxdWVzdFVwZGF0ZSgpO1xuICBjb25zdCB0aW1lID0gdXNlVmFyKCk7XG4gIGNvbnN0IHJlcUlkID0gdXNlVmFyKCk7XG5cbiAgdXNlSW5pdGlhbGl6ZSgoKSA9PiB7XG4gICAgY29uc3Qgb25GcmFtZSA9ICh0KSA9PiB7XG4gICAgICB0aW1lLmN1cnJlbnQgPSAwLjAwMSp0O1xuICAgICAgcmVxSWQuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShvbkZyYW1lKTsgLy8gcmVxdWVzdCBhbm90aGVyXG4gICAgICByZXF1ZXN0VXBkYXRlKCk7XG4gICAgfTtcblxuICAgIHRpbWUuY3VycmVudCA9IDAuMDAxKnBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHJlcUlkLmN1cnJlbnQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUob25GcmFtZSk7XG5cbiAgICByZXR1cm4gKCkgPT4geyAvLyBjbGVhbnVwXG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyZXFJZC5jdXJyZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0aW1lLmN1cnJlbnQ7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkZyYW1lRXZ0cygpIHtcbiAgY29uc3QgcmVxdWVzdFVwZGF0ZSA9IHVzZVJlcXVlc3RVcGRhdGUoKTtcbiAgY29uc3QgcmVxSWQgPSB1c2VWYXIoKTtcbiAgY29uc3QgW2ZyYW1lRXZ0cywgZW1pdEZyYW1lXSA9IHVzZUFzeW5jRXZlbnRFbWl0dGVyKCk7XG5cbiAgdXNlSW5pdGlhbGl6ZSgoKSA9PiB7XG4gICAgY29uc3Qgb25GcmFtZSA9ICh0KSA9PiB7XG4gICAgICBlbWl0RnJhbWUoKTtcbiAgICAgIHJlcUlkLmN1cnJlbnQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUob25GcmFtZSk7IC8vIHJlcXVlc3QgYW5vdGhlclxuICAgICAgcmVxdWVzdFVwZGF0ZSgpO1xuICAgIH07XG5cbiAgICByZXFJZC5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9uRnJhbWUpO1xuXG4gICAgcmV0dXJuICgpID0+IHsgLy8gY2xlYW51cFxuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVxSWQuY3VycmVudCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZnJhbWVFdnRzO1xufVxuXG5mdW5jdGlvbiBjb3VudEV2ZW50cyhldnRzKSB7XG4gIGNvbnN0IGNvdW50ID0gdXNlVmFyKDApO1xuICBjb25zdCBldmVudCA9IHVzZUV2ZW50UmVjZWl2ZXIoZXZ0cyk7XG5cbiAgaWYgKGV2ZW50KSB7XG4gICAgY291bnQuY3VycmVudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvdW50LmN1cnJlbnQ7XG59XG5cbmZ1bmN0aW9uIG1vdXNlQ2xpY2tFdnRzKCkge1xuICBjb25zdCByZXF1ZXN0VXBkYXRlID0gdXNlUmVxdWVzdFVwZGF0ZSgpO1xuICBjb25zdCBbY2xpY2tFdnQsIGVtaXRDbGlja10gPSB1c2VBc3luY0V2ZW50RW1pdHRlcigpO1xuXG4gIHVzZUluaXRpYWxpemUoKCkgPT4ge1xuICAgIGNvbnN0IG9uTW91c2VEb3duID0gKCkgPT4ge1xuICAgICAgZW1pdENsaWNrKCk7XG4gICAgICByZXF1ZXN0VXBkYXRlKCk7XG4gICAgfVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uTW91c2VEb3duKTtcblxuICAgIHJldHVybiAoKSA9PiB7IC8vIGNsZWFudXBcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uTW91c2VEb3duKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjbGlja0V2dDtcbn1cblxuZnVuY3Rpb24gbW91c2VEb3duKCkge1xuICBjb25zdCByZXF1ZXN0VXBkYXRlID0gdXNlUmVxdWVzdFVwZGF0ZSgpO1xuICBjb25zdCBpc0Rvd24gPSB1c2VWYXIoZmFsc2UpOyAvLyB3ZSBjYW4ndCBwb2xsIGRvd24tbmVzcywgc28gd2UgYXNzdW1lIGl0J3MgaW5pdGlhbGx5IG5vdCBkb3duXG5cbiAgdXNlSW5pdGlhbGl6ZSgoKSA9PiB7XG4gICAgY29uc3Qgb25Nb3VzZURvd24gPSAoKSA9PiB7XG4gICAgICBpc0Rvd24uY3VycmVudCA9IHRydWU7XG4gICAgICByZXF1ZXN0VXBkYXRlKCk7XG4gICAgfVxuICAgIGNvbnN0IG9uTW91c2VVcCA9ICgpID0+IHtcbiAgICAgIGlzRG93bi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXF1ZXN0VXBkYXRlKCk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Nb3VzZURvd24pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbk1vdXNlVXApO1xuXG4gICAgcmV0dXJuICgpID0+IHsgLy8gY2xlYW51cFxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Nb3VzZURvd24pO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uTW91c2VVcCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gaXNEb3duLmN1cnJlbnQ7XG59XG5cbmZ1bmN0aW9uIG1vdXNlUG9zaXRpb24oKSB7XG4gIGNvbnN0IHJlcXVlc3RVcGRhdGUgPSB1c2VSZXF1ZXN0VXBkYXRlKCk7XG4gIGNvbnN0IHBvc2l0aW9uID0gdXNlVmFyKHt4OiAwLCB5OiAwfSk7IC8vIHdlIGNhbid0IHBvbGwgcG9zaXRpb24sIHNvIHN0YXJ0IGl0IGF0IG9yaWdpblxuXG4gIHVzZUluaXRpYWxpemUoKCkgPT4ge1xuICAgIGNvbnN0IG9uTW91c2VNb3ZlID0gKGUpID0+IHtcbiAgICAgIHBvc2l0aW9uLmN1cnJlbnQgPSB7XG4gICAgICAgIHg6IGUuY2xpZW50WCB8fCBlLnBhZ2VYLFxuICAgICAgICB5OiBlLmNsaWVudFkgfHwgZS5wYWdlWSxcbiAgICAgIH07XG4gICAgICByZXF1ZXN0VXBkYXRlKCk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xuXG4gICAgcmV0dXJuICgpID0+IHsgLy8gY2xlYW51cFxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBvc2l0aW9uLmN1cnJlbnQ7XG59XG5cbmZ1bmN0aW9uIHJhbmRvbShyZXBpY2tFdnQpIHtcbiAgY29uc3QgdmFsID0gdXNlVmFyKE1hdGgucmFuZG9tKCkpO1xuICBjb25zdCByZXBpY2sgPSB1c2VFdmVudFJlY2VpdmVyKHJlcGlja0V2dCk7XG5cbiAgaWYgKHJlcGljaykge1xuICAgIHZhbC5jdXJyZW50ID0gTWF0aC5yYW5kb20oKTtcbiAgfVxuXG4gIHJldHVybiB2YWwuY3VycmVudDtcbn1cblxuZnVuY3Rpb24gYXVkaW9Ecml2ZXIoZ2VuZXJhdG9yKSB7XG4gIGNvbnN0IGNyZWF0ZUdlbmVyYXRvciA9IHVzZUR5bmFtaWMoZ2VuZXJhdG9yKTtcbiAgY29uc3QgZ2VuZXJhdG9yQ3R4ID0gdXNlVmFyKCk7XG4gIGNvbnN0IGZyYW1lQ291bnQgPSB1c2VWYXIoMCk7XG4gIGNvbnN0IHNhbXBsZVJhdGUgPSB1c2VWYXIoKTtcblxuICB1c2VJbml0aWFsaXplKCgpID0+IHtcbiAgICBnZW5lcmF0b3JDdHguY3VycmVudCA9IGNyZWF0ZUdlbmVyYXRvcigpO1xuXG4gICAgY29uc3QgQlVGRkVSX1NJWkUgPSAxMDI0O1xuICAgIGNvbnN0IGF1ZGlvQ29udGV4dCA9IG5ldyAod2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KSgpO1xuICAgIGNvbnN0IHNjcmlwdE5vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlU2NyaXB0UHJvY2Vzc29yKEJVRkZFUl9TSVpFLCAwLCAxKTsgLy8gMCBpbnB1dCBjaGFubmVscywgMSBvdXRwdXQgY2hhbm5lbFxuICAgIHNjcmlwdE5vZGUub25hdWRpb3Byb2Nlc3MgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgYnVmZmVyID0gZS5vdXRwdXRCdWZmZXIuZ2V0Q2hhbm5lbERhdGEoMCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBidWZmZXJbaV0gPSBnZW5lcmF0b3JDdHguY3VycmVudC51cGRhdGUoZnJhbWVDb3VudC5jdXJyZW50L3NhbXBsZVJhdGUuY3VycmVudCwge3ZhbHVlOiB1bmRlZmluZWR9LCBzYW1wbGVSYXRlLmN1cnJlbnQpO1xuICAgICAgICBmcmFtZUNvdW50LmN1cnJlbnQrKztcbiAgICAgIH1cbiAgICB9O1xuICAgIHNjcmlwdE5vZGUuY29ubmVjdChhdWRpb0NvbnRleHQuZGVzdGluYXRpb24pO1xuXG4gICAgc2FtcGxlUmF0ZS5jdXJyZW50ID0gYXVkaW9Db250ZXh0LnNhbXBsZVJhdGU7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc2NyaXB0Tm9kZS5kaXNjb25uZWN0KCk7XG4gICAgICBhdWRpb0NvbnRleHQuY2xvc2UoKTtcbiAgICB9O1xuICB9KTtcblxuICAvKipcbiAgICogTW9zdCBvZiBvdXIgZ2VuZXJhdG9yIHVwZGF0aW5nIHdpbGwgaGFwcGVuIGluIHRoZSBhdWRpbyBwcm9jZXNzaW5nIGNhbGxiYWNrIGFib3ZlLlxuICAgKiBUaGlzIHVwZGF0ZSBoZXJlIGlzIGZvciB3aGVuIHRoZSBhdWRpb0RyaXZlciB1cGRhdGUgaXMgY2FsbGVkLCBlLmcuIHdoZW4gYW4gb3V0ZXIgc2NvcGVcbiAgICogcmVmZXJlbmNlIHRoYXQgdGhlIGdlbmVyYXRvciBkZXBlbmRzIG9uIGhhcyBjaGFuZ2VkLiBTbyB3ZSBtdXN0IHVwZGF0ZSB0aGUgZ2VuZXJhdG9yLFxuICAgKiBidXQgZG9uJ3QgbmVlZCBpdHMgb3V0cHV0IGFtcGxpdHVkZS5cbiAgICovXG4gIGdlbmVyYXRvckN0eC5jdXJyZW50LnVwZGF0ZShmcmFtZUNvdW50LmN1cnJlbnQvc2FtcGxlUmF0ZS5jdXJyZW50LCB1bmRlZmluZWQsIHNhbXBsZVJhdGUuY3VycmVudCk7IC8vIE5PVEU6IHdlIGRpc2NhcmQgcmV0dmFsXG59XG5cbmZ1bmN0aW9uIHNhbXBsZVVwb24odG9TYW1wbGUsIHVwb25FdnQsIGluaXRpYWxWYWx1ZSkge1xuICBjb25zdCBoZWxkID0gdXNlVmFyKGluaXRpYWxWYWx1ZSk7XG4gIGNvbnN0IHVwb24gPSB1c2VFdmVudFJlY2VpdmVyKHVwb25FdnQpO1xuXG4gIGlmICh1cG9uKSB7XG4gICAgaGVsZC5jdXJyZW50ID0gdG9TYW1wbGU7XG4gIH1cblxuICByZXR1cm4gaGVsZC5jdXJyZW50O1xufVxuXG5mdW5jdGlvbiBldmVyeVNlY29uZCgpIHtcbiAgY29uc3QgcmVxdWVzdFVwZGF0ZSA9IHVzZVJlcXVlc3RVcGRhdGUoKTtcbiAgY29uc3QgW3RpY2tFdnQsIGVtaXRUaWNrXSA9IHVzZUFzeW5jRXZlbnRFbWl0dGVyKCk7XG5cbiAgdXNlSW5pdGlhbGl6ZSgoKSA9PiB7XG4gICAgY29uc3Qgb25JbnRlcnZhbCA9ICgpID0+IHtcbiAgICAgIGVtaXRUaWNrKCk7XG4gICAgICByZXF1ZXN0VXBkYXRlKCk7XG4gICAgfVxuICAgIGNvbnN0IHRpbWVySWQgPSBzZXRJbnRlcnZhbChvbkludGVydmFsLCAxMDAwKTtcblxuICAgIHJldHVybiAoKSA9PiB7IC8vIGNsZWFudXBcbiAgICAgIGNsZWFySW50ZXJ2YWwodGltZXJJZCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGlja0V2dDtcbn1cblxuLyoqXG4gKiBVbnRpbCBhdWRpbyBpcyBsb2FkZWQgYW5kIGRlY29kZWQsIGEgc2luZ2xlLXNhbXBsZSBidWZmZXIgb2Ygc2lsZW5jZSBpcyByZXR1cm5lZC5cbiAqL1xuZnVuY3Rpb24gbG9hZEF1ZGlvQXNBcnJheSh1cmwpIHtcbiAgY29uc3QgcmVxdWVzdFVwZGF0ZSA9IHVzZVJlcXVlc3RVcGRhdGUoKTtcbiAgY29uc3QgcGNtID0gdXNlVmFyKFswXSk7IC8vIHVudGlsIGxvYWRlZCwganVzdCByZXR1cm4gc2luZ2xlIHNhbXBsZSBvZiBzaWxlbmNlXG5cbiAgdXNlSW5pdGlhbGl6ZSgoKSA9PiB7XG4gICAgY29uc3QgYXVkaW9DdHggPSBuZXcgKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCkoKTtcbiAgICBsZXQgY2xlYW5lZFVwID0gZmFsc2U7XG5cbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgcmVxdWVzdC5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICByZXF1ZXN0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGF1ZGlvRGF0YSA9IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBhdWRpb0N0eC5kZWNvZGVBdWRpb0RhdGEoYXVkaW9EYXRhLCBidWZmZXIgPT4ge1xuICAgICAgICBpZiAoIWNsZWFuZWRVcCkge1xuICAgICAgICAgIHBjbS5jdXJyZW50ID0gYnVmZmVyLmdldENoYW5uZWxEYXRhKDApO1xuICAgICAgICAgIHJlcXVlc3RVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJlcXVlc3Quc2VuZCgpO1xuXG4gICAgcmV0dXJuICgpID0+IHsgLy8gY2xlYW51cFxuICAgICAgcmVxdWVzdC5hYm9ydCgpOyAvLyBpdCdzIHNhZmUgdG8gYWx3YXlzIGFib3J0IGhlcmUuIGlmIGFscmVhZHkgY29tcGxldGVkLCBpdCB3aWxsIGJlIGlnbm9yZWRcblxuICAgICAgLy8gZGVjb2RlQXVkaW9EYXRhIGNhbm5vdCBiZSBjYW5jZWxlZC4gU28gdG8gYmUgY29ycmVjdCwgd2UgbXVzdCBzZXQgYSBmbGFnIGhlcmUgdG8gbWFrZSBzdXJlXG4gICAgICAvLyB0aGF0IGRlY29kaW5nIGlzIGlnbm9yZWRcbiAgICAgIGNsZWFuZWRVcCA9IHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGNtLmN1cnJlbnQ7XG59XG5cbmZ1bmN0aW9uIGNvbnNvbGVMb2codikge1xuICBjb25zb2xlLmxvZyh2KTtcbn1cblxuZnVuY3Rpb24gaW50ZWdyYWwoaW50ZWdyYW5kRnVuYywgdGltZSwgaW5pdGlhbFZhbHVlID0gMCkge1xuICBjb25zdCBhY2N1bSA9IHVzZVZhcihpbml0aWFsVmFsdWUpO1xuICBjb25zdCBwcmV2VGltZSA9IHVzZVZhcih0aW1lKTtcblxuICBjb25zdCBpbnRlZ3JhbmQgPSBpbnRlZ3JhbmRGdW5jKGFjY3VtLmN1cnJlbnQsIHByZXZUaW1lLmN1cnJlbnQpO1xuICBhY2N1bS5jdXJyZW50ICs9ICh0aW1lIC0gcHJldlRpbWUuY3VycmVudCkqaW50ZWdyYW5kO1xuXG4gIHByZXZUaW1lLmN1cnJlbnQgPSB0aW1lO1xuXG4gIHJldHVybiBhY2N1bS5jdXJyZW50O1xufVxuXG5mdW5jdGlvbiBleHBGb2xsb3codGFyZ2V0VmFsdWUsIHNwZWVkQ29uc3RhbnQsIHRpbWUsIGluaXRpYWxWYWx1ZSkge1xuICByZXR1cm4gaW50ZWdyYWwoY3VycmVudFZhbHVlID0+IHNwZWVkQ29uc3RhbnQqKHRhcmdldFZhbHVlIC0gY3VycmVudFZhbHVlKSwgdGltZSwgaW5pdGlhbFZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcmVkQ2lyY2xlKHBvc2l0aW9uLCByYWRpdXMgPSAyNSkge1xuICBjb25zdCBlbGVtID0gdXNlVmFyKG51bGwpO1xuXG4gIHVzZUluaXRpYWxpemUoKCkgPT4ge1xuICAgIGVsZW0uY3VycmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW0uY3VycmVudC5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsgYm9yZGVyLXJhZGl1czogNTAlOyBiYWNrZ3JvdW5kOiByZWQ7IHBvaW50ZXItZXZlbnRzOiBub25lOyB1c2VyLXNlbGVjdDogbm9uZSc7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtLmN1cnJlbnQpO1xuXG4gICAgcmV0dXJuICgpID0+IHsgLy8gY2xlYW51cFxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGVtLmN1cnJlbnQpO1xuICAgIH1cbiAgfSlcblxuICBjb25zdCBwID0gcG9zaXRpb24gfHwge3g6IDAsIHk6IDB9O1xuICBpZiAocmFkaXVzIDwgMCkge1xuICAgIHJhZGl1cyA9IDA7XG4gIH1cbiAgY29uc3QgaGFsZlJhZGl1cyA9IDAuNSpyYWRpdXM7XG5cbiAgZWxlbS5jdXJyZW50LnN0eWxlLmxlZnQgPSAocC54IC0gaGFsZlJhZGl1cykgKyAncHgnO1xuICBlbGVtLmN1cnJlbnQuc3R5bGUudG9wID0gKHAueSAtIGhhbGZSYWRpdXMpICsgJ3B4JztcbiAgZWxlbS5jdXJyZW50LnN0eWxlLndpZHRoID0gcmFkaXVzICsgJ3B4JztcbiAgZWxlbS5jdXJyZW50LnN0eWxlLmhlaWdodCA9IHJhZGl1cyArICdweCc7XG59XG5cbmZ1bmN0aW9uIGZvbGxvd0F0U3BlZWQyZCh0YXJnZXQsIHNwZWVkLCB0aW1lLCBpbml0aWFsKSB7XG4gIGNvbnN0IHBvcyA9IHVzZVZhcihpbml0aWFsKTtcbiAgY29uc3QgcHJldlRpbWUgPSB1c2VWYXIodGltZSk7XG5cbiAgY29uc3QgZHQgPSB0aW1lIC0gcHJldlRpbWUuY3VycmVudDtcbiAgY29uc3QgZGVsdGEgPSB7eDogdGFyZ2V0LngtcG9zLmN1cnJlbnQueCwgeTogdGFyZ2V0LnktcG9zLmN1cnJlbnQueX07XG4gIGNvbnN0IGRpc3QgPSBNYXRoLnNxcnQoZGVsdGEueCpkZWx0YS54ICsgZGVsdGEueSpkZWx0YS55KTtcbiAgaWYgKHNwZWVkKmR0ID49IGRpc3QpIHtcbiAgICAvLyBKdW1wIHRvIHRhcmdldCBwb3NpdGlvblxuICAgIHBvcy5jdXJyZW50ID0gdGFyZ2V0O1xuICB9IGVsc2Uge1xuICAgIC8vIE5PVEU6IFdlIG11c3Qgbm90IG11dGF0ZSBwb3MuY3VycmVudCwgc2luY2Ugd2UgcmV0dXJuIHRoYXRcbiAgICBwb3MuY3VycmVudCA9IHtcbiAgICAgIHg6IHBvcy5jdXJyZW50LnggKyBkdCpzcGVlZCpkZWx0YS54L2Rpc3QsXG4gICAgICB5OiBwb3MuY3VycmVudC55ICsgZHQqc3BlZWQqZGVsdGEueS9kaXN0LFxuICAgIH07XG4gIH1cblxuICBwcmV2VGltZS5jdXJyZW50ID0gdGltZTtcblxuICByZXR1cm4gcG9zLmN1cnJlbnQ7XG59XG5cbi8qKlxuICogTm90ZSB0aGF0IHRoaXMgX3dpbGxfIGZpcmUgaW4gZmlyc3QgY2FsbCBpZiBjb25kaXRpb24gc3RhcnRzIHRydXRoeVxuICovXG5mdW5jdGlvbiBldmVudFdoZW4oY29uZGl0aW9uLCB2YWx1ZVRvRW1pdCkge1xuICBjb25zdCBwcmV2Q29uZGl0aW9uID0gdXNlVmFyKGZhbHNlKTtcblxuICBjb25zdCBiY29uZCA9ICEhY29uZGl0aW9uO1xuXG4gIGNvbnN0IHJldHZhbCA9IChiY29uZCAmJiAhcHJldkNvbmRpdGlvbi5jdXJyZW50KSA/IHt2YWx1ZTogdmFsdWVUb0VtaXR9IDogdW5kZWZpbmVkO1xuICBwcmV2Q29uZGl0aW9uLmN1cnJlbnQgPSBiY29uZDtcblxuICByZXR1cm4gcmV0dmFsO1xufVxuXG4vKipcbiAqIE5vdGUgdGhhdCBzZWNvbmRzIGFyZ3VtZW50IGlzIG9ubHkgcmVhZCBpbml0aWFsbHkuIEJ1dCB2YWx1ZVRvRW1pdCBpcyByZS1yZWFkIG9uIGNoYW5nZXNcbiAqL1xuZnVuY3Rpb24gZXZlbnRBZnRlcihzZWNvbmRzLCB2YWx1ZVRvRW1pdCkge1xuICBjb25zdCBbZXZ0LCBlbWl0XSA9IHVzZUFzeW5jRXZlbnRFbWl0dGVyKCk7XG4gIGNvbnN0IHZhbHVlID0gdXNlVmFyKHZhbHVlVG9FbWl0KTtcblxuICB2YWx1ZS5jdXJyZW50ID0gdmFsdWVUb0VtaXQ7XG5cbiAgdXNlSW5pdGlhbGl6ZSgoKSA9PiB7XG4gICAgY29uc3QgdGltZXJJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZW1pdCh2YWx1ZS5jdXJyZW50KTtcbiAgICB9LCAxMDAwKnNlY29uZHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfTtcbiAgfSk7XG5cbiAgcmV0dXJuIGV2dDtcbn1cblxuZnVuY3Rpb24gbWFrZUFzeW5jQ2FsbGJhY2soKSB7XG4gIGNvbnN0IFtldnQsIGVtaXRdID0gdXNlQXN5bmNFdmVudEVtaXR0ZXIoKTtcbiAgY29uc3QgcmVxdWVzdFVwZGF0ZSA9IHVzZVJlcXVlc3RVcGRhdGUoKTtcblxuICBjb25zdCBjYWxsYmFjayA9ICguLi5hcmdzKSA9PiB7XG4gICAgZW1pdChhcmdzKTtcbiAgICByZXF1ZXN0VXBkYXRlKCk7XG4gIH07XG5cbiAgcmV0dXJuIFtjYWxsYmFjaywgZXZ0XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW1xuICB7XG4gICAgbmFtZTogJ2RvIG5vdGhpbmcnLFxuICAgIG1haW46ICgpID0+IHtcbiAgICB9LFxuICB9LFxuXG4gIHtcbiAgICBuYW1lOiAnYW5pbWF0aW9uIHRpbWUnLFxuICAgIG1haW46ICgpID0+IHtcbiAgICAgIHNob3dTdHJpbmcoYW5pbWF0aW9uVGltZSgpLnRvRml4ZWQoMykpO1xuICAgIH0sXG4gIH0sXG5cbiAge1xuICAgIG5hbWU6ICdjb3VudCBjbGlja3MnLFxuICAgIG1haW46ICgpID0+IHtcbiAgICAgIHNob3dTdHJpbmcoY291bnRFdmVudHMobW91c2VDbGlja0V2dHMoKSkpO1xuICAgIH0sXG4gIH0sXG5cbiAge1xuICAgIG5hbWU6ICdpcyBtb3VzZSBidXR0b24gZG93bicsXG4gICAgbWFpbjogKCkgPT4ge1xuICAgICAgc2hvd1N0cmluZyhtb3VzZURvd24oKSk7XG4gICAgfSxcbiAgfSxcblxuICB7XG4gICAgbmFtZTogJ3JhbmRvbSBudW1iZXIsIGNsaWNrIHRvIHJlcGljaycsXG4gICAgbWFpbjogKCkgPT4ge1xuICAgICAgc2hvd1N0cmluZyhyYW5kb20obW91c2VDbGlja0V2dHMoKSkpO1xuICAgIH0sXG4gIH0sXG5cbiAge1xuICAgIG5hbWU6ICdhdWRpbyBub2lzZSB3aGVuIG1vdXNlIGlzIGRvd24nLFxuICAgIG1haW46ICgpID0+IHtcbiAgICAgIGNvbnN0IG1kID0gbW91c2VEb3duKCk7XG4gICAgICBhdWRpb0RyaXZlcigoYXVkaW9UaW1lLCBhZHZhbmNlRnJhbWVFdnQpID0+IHtcbiAgICAgICAgY29uc3Qgbm9pc2UgPSByYW5kb20oYWR2YW5jZUZyYW1lRXZ0KSAtIDAuNTtcbiAgICAgICAgcmV0dXJuIG1kID8gbm9pc2UgOiAwO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfSxcblxuICB7XG4gICAgbmFtZTogJ2RlY2F5aW5nIG5vaXNlIHVwb24gY2xpY2snLFxuICAgIG1haW46ICgpID0+IHtcbiAgICAgIGNvbnN0IGNsaWNrRXZ0ID0gbW91c2VDbGlja0V2dHMoKTtcbiAgICAgIGF1ZGlvRHJpdmVyKChhdWRpb1RpbWUsIGFkdmFuY2VGcmFtZUV2dCkgPT4ge1xuICAgICAgICBjb25zdCBub2lzZSA9IHJhbmRvbShhZHZhbmNlRnJhbWVFdnQpIC0gMC41O1xuICAgICAgICBjb25zdCBsYXN0Q2xpY2tUaW1lID0gc2FtcGxlVXBvbihhdWRpb1RpbWUsIGNsaWNrRXZ0LCAtSW5maW5pdHkpO1xuICAgICAgICBjb25zdCBkZWNheWluZ0dhaW4gPSBNYXRoLmV4cCg1KihsYXN0Q2xpY2tUaW1lIC0gYXVkaW9UaW1lKSk7XG4gICAgICAgIHJldHVybiBkZWNheWluZ0dhaW4qbm9pc2U7XG4gICAgICB9KTtcbiAgICB9LFxuICB9LFxuXG4gIHtcbiAgICBuYW1lOiAncmVzZXR0aW5nIGZyYW1lIGNvdW50ZXIsIGNsaWNrIHRvIHJlc2V0JyxcbiAgICBtYWluOiAoKSA9PiB7XG4gICAgICBjb25zdCBmcmFtZUV2dHMgPSBhbmltYXRpb25GcmFtZUV2dHMoKTtcbiAgICAgIGNvbnN0IGNsaWNrRXZ0ID0gbW91c2VDbGlja0V2dHMoKTtcbiAgICAgIGNvbnN0IGNsaWNrID0gdXNlRXZlbnRSZWNlaXZlcihjbGlja0V2dCk7XG4gICAgICBjb25zdCBjcmVhdGVDb3VudGVyID0gdXNlRHluYW1pYyhjb3VudEV2ZW50cyk7XG4gICAgICBjb25zdCBhY3RpdmVDb3VudGVyID0gdXNlVmFyKCk7XG5cbiAgICAgIGlmIChjbGljaykge1xuICAgICAgICBpZiAoYWN0aXZlQ291bnRlci5jdXJyZW50KSB7XG4gICAgICAgICAgYWN0aXZlQ291bnRlci5jdXJyZW50LnRlcm1pbmF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2ZUNvdW50ZXIuY3VycmVudCA9IGNyZWF0ZUNvdW50ZXIoKTtcbiAgICAgIH1cbiAgICAgIGlmICghYWN0aXZlQ291bnRlci5jdXJyZW50KSB7XG4gICAgICAgIGFjdGl2ZUNvdW50ZXIuY3VycmVudCA9IGNyZWF0ZUNvdW50ZXIoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGlzcGxheWVkQ291bnQgPSBhY3RpdmVDb3VudGVyLmN1cnJlbnQudXBkYXRlKGZyYW1lRXZ0cyk7XG4gICAgICBzaG93U3RyaW5nKGRpc3BsYXllZENvdW50KTtcbiAgICB9XG4gIH0sXG5cbiAge1xuICAgIG5hbWU6ICdkeW5hbWljIGFycmF5IG9mIGFzeW5jIGNsb2NrcywgY2xpY2sgdG8gYWRkJyxcbiAgICBtYWluOiAoKSA9PiB7XG4gICAgICBjb25zdCBjbGlja0V2dCA9IG1vdXNlQ2xpY2tFdnRzKCk7XG4gICAgICBjb25zdCBjbGljayA9IHVzZUV2ZW50UmVjZWl2ZXIoY2xpY2tFdnQpO1xuICAgICAgY29uc3QgY3JlYXRlQ2xvY2sgPSB1c2VEeW5hbWljKCgpID0+IGNvdW50RXZlbnRzKGV2ZXJ5U2Vjb25kKCkpKTtcbiAgICAgIGNvbnN0IGNsb2NrQXJyYXkgPSB1c2VWYXIoW10pO1xuXG4gICAgICBpZiAoY2xpY2spIHtcbiAgICAgICAgY2xvY2tBcnJheS5jdXJyZW50LnB1c2goY3JlYXRlQ2xvY2soKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG51bXMgPSBjbG9ja0FycmF5LmN1cnJlbnQubWFwKGNsb2NrID0+IGNsb2NrLnVwZGF0ZSgpKTtcbiAgICAgIHNob3dTdHJpbmcobnVtcy5qb2luKCcgJykpO1xuICAgIH1cbiAgfSxcblxuICB7XG4gICAgbmFtZTogJ3JlY29yZCBwbGF5ZXIgc3BpbiB1cC9kb3duLCBob2xkIG1vdXNlIGRvd24gYW5kIHJlbGVhc2UnLFxuICAgIG1haW46ICgpID0+IHtcbiAgICAgIGNvbnN0IHBjbSA9IGxvYWRBdWRpb0FzQXJyYXkoYW1lbl9icmVha191cmwpO1xuICAgICAgc2hvd1N0cmluZyhwY20ubGVuZ3RoID4gMSA/ICdsb2FkZWQgYXVkaW8nIDogJ2xvYWRpbmcgYXVkaW8uLi4nKTtcbiAgICAgIGF1ZGlvRHJpdmVyKChhdWRpb1RpbWUsIGFkdmFuY2VGcmFtZUV2dCwgc2FtcGxlUmF0ZSkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXRTcGVlZCA9IG1vdXNlRG93bigpID8gc2FtcGxlUmF0ZSA6IDA7XG4gICAgICAgIGNvbnN0IHNwZWVkID0gZXhwRm9sbG93KHRhcmdldFNwZWVkLCAzLCBhdWRpb1RpbWUsIDApO1xuICAgICAgICBjb25zdCBwb3MgPSBNYXRoLmZsb29yKGludGVncmFsKCgpID0+IHNwZWVkLCBhdWRpb1RpbWUpKTtcbiAgICAgICAgcmV0dXJuIHBjbVtwb3MgJSBwY20ubGVuZ3RoXTsgLy8gbW9kdWxvIHNvIGFzIHRvIGxvb3BcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICB7XG4gICAgbmFtZTogJ2NpcmNsZSBmb2xsb3dzIG1vdXNlJyxcbiAgICBtYWluOiAoKSA9PiB7XG4gICAgICByZWRDaXJjbGUobW91c2VQb3NpdGlvbigpKTtcbiAgICB9XG4gIH0sXG5cbiAge1xuICAgIG5hbWU6ICdjaXJjbGUgZm9sbG93cyBtb3VzZSBhdCBsaW1pdGVkIHNwZWVkJyxcbiAgICBtYWluOiAoKSA9PiB7XG4gICAgICBjb25zdCB0aW1lID0gYW5pbWF0aW9uVGltZSgpO1xuICAgICAgY29uc3QgbXBvcyA9IG1vdXNlUG9zaXRpb24oKTtcbiAgICAgIHJlZENpcmNsZShmb2xsb3dBdFNwZWVkMmQobXBvcywgMzAwLCB0aW1lLCBtcG9zKSk7XG4gICAgfVxuICB9LFxuXG4gIHtcbiAgICBuYW1lOiAnY2lyY2xlIG1vdmVzIGhhbGZ3YXkgdG8gbW91c2Ugd2l0aCBlYWNoIGNsaWNrJyxcbiAgICBtYWluOiAoKSA9PiB7XG4gICAgICBjb25zdCBtaWRwb2ludCA9IChhLCBiKSA9PiAoe3g6IDAuNSooYS54K2IueCksIHk6IDAuNSooYS55K2IueSl9KTtcbiAgICAgIGNvbnN0IG1wb3MgPSBtb3VzZVBvc2l0aW9uKCk7XG4gICAgICBjb25zdCBjbGlja0V2dCA9IG1vdXNlQ2xpY2tFdnRzKCk7XG4gICAgICBjb25zdCBjcG9zID0gdXNlUmVkdWNlcihjbGlja0V2dCwgKF8sIHByZXZTdGF0ZSkgPT4gbWlkcG9pbnQocHJldlN0YXRlLCBtcG9zKSwge3g6IDAsIHk6IDB9KTtcbiAgICAgIHJlZENpcmNsZShjcG9zKTtcbiAgICB9XG4gIH0sXG5cbiAge1xuICAgIG5hbWU6ICdyb2FtaW5nIGNpcmNsZSAoc3RhdGUgbWFjaGluZSknLFxuICAgIG1haW46ICgpID0+IHtcbiAgICAgIGNvbnN0IHRpbWUgPSBhbmltYXRpb25UaW1lKCk7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHVzZU1hY2hpbmUoe1xuICAgICAgICBtb3Zpbmc6IChpbml0aWFsUG9zaXRpb24pID0+IHtcbiAgICAgICAgICBjb25zdCB0YXJnZXRQb3NpdGlvbiA9IHt4OiA1MDAqcmFuZG9tKCksIHk6IDUwMCpyYW5kb20oKX07XG4gICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBmb2xsb3dBdFNwZWVkMmQodGFyZ2V0UG9zaXRpb24sIDMwMCwgdGltZSwgaW5pdGlhbFBvc2l0aW9uKTtcbiAgICAgICAgICBjb25zdCBhcnJpdmVkID0gKHBvc2l0aW9uLnggPT09IHRhcmdldFBvc2l0aW9uLngpICYmIChwb3NpdGlvbi55ID09PSB0YXJnZXRQb3NpdGlvbi55KTtcbiAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgICBldmVudFdoZW4oYXJyaXZlZCwgWydyZXN0aW5nJywgcG9zaXRpb25dKVxuICAgICAgICAgIF07XG4gICAgICAgIH0sXG4gICAgICAgIHJlc3Rpbmc6IChpbml0aWFsUG9zaXRpb24pID0+IHtcbiAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgaW5pdGlhbFBvc2l0aW9uLFxuICAgICAgICAgICAgZXZlbnRBZnRlcihyYW5kb20oKSwgWydtb3ZpbmcnLCBpbml0aWFsUG9zaXRpb25dKVxuICAgICAgICAgIF07XG4gICAgICAgIH0sXG4gICAgICB9LCBbJ21vdmluZycsIHt4OiAwLCB5OiAwfV0pO1xuICAgICAgcmVkQ2lyY2xlKHBvc2l0aW9uKTtcbiAgICB9XG4gIH0sXG5cbiAgLyogQUxURVJOQVRFIEpTWCBWRVJTSU9OIEZPUiBCRUxPV1xuICAgIGNvbnN0IHZub2RlID0gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPHNwYW4+e2xhYmVsfSB7dmFsdWV9e3VuaXR9PC9zcGFuPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbWluPXttaW59IG1heD17bWF4fSB2YWx1ZT17dmFsdWV9IG9uLWlucHV0PXtpbnB1dENhbGxiYWNrfSAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgKi9cbiAge1xuICAgIG5hbWU6ICdET00nLFxuICAgIG1haW46ICgpID0+IHtcbiAgICAgIGNvbnN0IExhYmVsZWRTbGlkZXIgPSAobGFiZWwsIHVuaXQsIG1pbiwgaW5pdGlhbFZhbHVlLCBtYXgpID0+IHtcbiAgICAgICAgY29uc3QgW2lucHV0Q2FsbGJhY2ssIGlucHV0RXZ0XSA9IG1ha2VBc3luY0NhbGxiYWNrKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdXNlUmVkdWNlcihpbnB1dEV2dCwgKFtlXSwgcHJldlN0YXRlKSA9PiBlLnRhcmdldC52YWx1ZSwgaW5pdGlhbFZhbHVlKTtcblxuICAgICAgICBjb25zdCB2bm9kZSA9IGgoJ2RpdicsIFtcbiAgICAgICAgICBoKCdzcGFuJywgbGFiZWwgKyAnICcgKyB2YWx1ZSArIHVuaXQpLFxuICAgICAgICAgIGgoJ2lucHV0Jywge2F0dHJzOiB7dHlwZTogJ3JhbmdlJywgbWluLCBtYXgsIHZhbHVlfSwgb246IHtpbnB1dDogaW5wdXRDYWxsYmFja319KVxuICAgICAgICBdKTtcblxuICAgICAgICByZXR1cm4gW3Zub2RlLCB2YWx1ZV07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBbd2VpZ2h0Tm9kZSwgd2VpZ2h0XSA9IExhYmVsZWRTbGlkZXIoJ1dlaWdodCcsICdrZycsIDQwLCA3MCwgMTUwKTtcbiAgICAgIGNvbnN0IFtoZWlnaHROb2RlLCBoZWlnaHRdID0gTGFiZWxlZFNsaWRlcignSGVpZ2h0JywgJ2NtJywgMTQwLCAxNzAsIDIxMCk7XG5cbiAgICAgIGNvbnN0IGhlaWdodE1ldGVycyA9IDAuMDEqaGVpZ2h0O1xuICAgICAgY29uc3QgYm1pID0gTWF0aC5yb3VuZCh3ZWlnaHQgLyAoaGVpZ2h0TWV0ZXJzKmhlaWdodE1ldGVycykpO1xuICAgICAgY29uc3QgdWlOb2RlID0gaCgnZGl2JywgW1xuICAgICAgICB3ZWlnaHROb2RlLFxuICAgICAgICBoZWlnaHROb2RlLFxuICAgICAgICBoKCdoMicsICdCTUkgaXMgJyArIGJtaSlcbiAgICAgIF0pO1xuXG4gICAgICByZW5kZXJET01JbnRvU2VsZWN0b3IodWlOb2RlLCAnI291dHB1dCcpO1xuICAgIH1cbiAgfSxcbl1cbiIsImltcG9ydCB7IGNyZWF0ZU5vSW5PdXRFeGVjdXRpb25Db250ZXh0IH0gZnJvbSAnLi9yaXYnO1xuaW1wb3J0IHByb2dyYW1zIGZyb20gJy4vcHJvZ3JhbXMnO1xuXG5jb25zdCBwcm9ncmFtTGlzdEVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3JhbS1saXN0Jyk7XG5jb25zdCBwcm9ncmFtU291cmNlRWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmFtLXNvdXJjZScpO1xuXG5sZXQgY3VycmVudENvbnRleHQ7XG5cbi8vIE5PVEU6IFRoaXMgaXMgYSBoYWNrIGJ1dCB3b3JrcyBmb3Igbm93XG5jb25zdCBmaXhJbmRlbnQgPSAoY29kZSkgPT4ge1xuICByZXR1cm4gY29kZS5zcGxpdCgnXFxuJykubWFwKChsaW5lLCBpZHgpID0+IChpZHggPT09IDApID8gbGluZSA6IGxpbmUuc3Vic3RyKDIpKS5qb2luKCdcXG4nKTtcbn1cblxuY29uc3Qgc3RhcnRQcm9ncmFtID0gKHByb2dyYW0pID0+IHtcbiAgaWYgKGN1cnJlbnRDb250ZXh0KSB7XG4gICAgY3VycmVudENvbnRleHQudGVybWluYXRlKCk7XG4gICAgY3VycmVudENvbnRleHQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBwcm9ncmFtU291cmNlRWxlbS50ZXh0Q29udGVudCA9IGZpeEluZGVudChwcm9ncmFtLm1haW4udG9TdHJpbmcoKSk7IC8vIGhhY2t5IGJ1dCB3b3JrcyBmb3Igbm93XG4gIGN1cnJlbnRDb250ZXh0ID0gY3JlYXRlTm9Jbk91dEV4ZWN1dGlvbkNvbnRleHQocHJvZ3JhbS5tYWluKTtcbiAgY3VycmVudENvbnRleHQudXBkYXRlKCk7IC8vIGRvIGluaXRpYWwgdXBkYXRlLiBhbnkgZnVydGhlciB1cGRhdGVzIHdpbGwgYmUgYXN5bmNcbn1cblxuZm9yIChjb25zdCBwcm9nIG9mIHByb2dyYW1zKSB7XG4gIGNvbnN0IGFuY2hvckVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIGFuY2hvckVsZW0udGV4dENvbnRlbnQgPSBwcm9nLm5hbWU7XG4gIGFuY2hvckVsZW0uc2V0QXR0cmlidXRlKCdocmVmJywgJyMnKTtcbiAgKCgpID0+IHtcbiAgICBhbmNob3JFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4geyAvLyBzdGFydCBwcm9ncmFtIHdpdGggZGVsYXkgc28gaXQgZG9lc24ndCBnZXQgdGhpcyBjbGljayBldmVudFxuICAgICAgICBzdGFydFByb2dyYW0ocHJvZyk7XG4gICAgICB9LCAwKTtcbiAgICB9KTtcbiAgfSkoKTtcblxuICBjb25zdCBpdGVtRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gIGl0ZW1FbGVtLmFwcGVuZENoaWxkKGFuY2hvckVsZW0pO1xuXG4gIHByb2dyYW1MaXN0RWxlbS5hcHBlbmRDaGlsZChpdGVtRWxlbSk7XG59XG5cbnN0YXJ0UHJvZ3JhbShwcm9ncmFtc1swXSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n")}]);